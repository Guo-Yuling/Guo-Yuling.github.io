<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2025/05/08/JavaWeb/"/>
      <url>/2025/05/08/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb从0到1"><a href="#JavaWeb从0到1" class="headerlink" title="JavaWeb从0到1"></a>JavaWeb从0到1</h1><h2 id="1-前端JS部分"><a href="#1-前端JS部分" class="headerlink" title="1.前端JS部分"></a>1.前端JS部分</h2><h3 id="标题部分"><a href="#标题部分" class="headerlink" title="标题部分"></a>标题部分</h3><ol><li>标题标签<ul><li>标签：<code>&lt;h1&gt;...&lt;/h1&gt;</code>（h1 → h6 重要程度依次降低）</li><li>注意：HTML标签都是预定义好的，不能自己随意定义。</li></ul></li><li>水平线标签 <code>&lt;hr&gt;</code></li><li>图片标签 <code>&lt;img src=&quot;...&quot; width=&quot;...&quot; height=&quot;...&quot;&gt;</code><ul><li>绝对路径：绝对磁盘路径（D:&#x2F;xxxx）、绝对网络路径（<a href="https://xxxx/">https://xxxx）</a>&#x2F;)</li><li>相对路径：从当前文件开始查找。（.&#x2F;：当前目录，..&#x2F;：上级目录）</li></ul></li></ol><p><img src="/imgs/JavaWeb/image-20250508233754138.png" alt="image-20250508233754138"></p><p>优先级：id选择器&gt;类选择器&gt;元素选择器</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><ol><li>超链接<ul><li>标签：<code>&lt;a&gt;</code></li><li>属性：<ul><li><code>href:</code> 指定资源访问的url</li><li><code>target:</code> 指定在何处打开资源链接<ul><li><code>_self:</code> 默认值，在当前页面打开</li><li><code>_blank:</code> 在空白页面打开</li></ul></li></ul></li></ul></li><li>CSS属性<ul><li><code>text-decoration:</code> 规定添加到文本的修饰，none表示定义标准的文本。</li><li><code>color:</code> 定义文本的颜色</li></ul></li></ol><h3 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h3><p><img src="/imgs/JavaWeb/image-20250508235859169.png" alt="image-20250508235859169"></p><p><img src="/imgs/JavaWeb/image-20250509000747843.png" alt="image-20250509000747843"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/2025/04/29/Mysql/"/>
      <url>/2025/04/29/Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h3><ul><li><h4 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a><strong>1. 基本定义</strong></h4></li><li><ul><li><strong>类型</strong>：关系型数据库（RDBMS）</li><li><strong>组成</strong>：由多张相互关联的<strong>二维表</strong>构成，表之间通过字段建立联系。</li></ul></li><li><h4 id="2-核心特点"><a href="#2-核心特点" class="headerlink" title="2. 核心特点"></a><strong>2. 核心特点</strong></h4></li><li><table><thead><tr><th align="left">特点</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>表结构存储</strong></td><td align="left">数据以行和列的形式存储，格式统一，易于维护。</td></tr><tr><td align="left"><strong>SQL语言操作</strong></td><td align="left">使用标准化SQL（结构化查询语言）进行数据操作，语法通用。</td></tr></tbody></table></li><li><h4 id="3-数据表示例"><a href="#3-数据表示例" class="headerlink" title="3. 数据表示例"></a><strong>3. 数据表示例</strong></h4></li><li><h5 id="员工表-employees"><a href="#员工表-employees" class="headerlink" title="员工表 (employees)"></a><strong>员工表 (employees)</strong></h5></li><li><table><thead><tr><th align="left">id</th><th align="left">name</th><th align="left">job</th><th align="left">dept_id</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">金庸</td><td align="left">总裁</td><td align="left">2</td></tr><tr><td align="left">2</td><td align="left">张无忌</td><td align="left">项目经理</td><td align="left">1</td></tr><tr><td align="left">3</td><td align="left">杨逍</td><td align="left">开发</td><td align="left">3</td></tr></tbody></table></li><li><h5 id="部门表-departments"><a href="#部门表-departments" class="headerlink" title="部门表 (departments)"></a><strong>部门表 (departments)</strong></h5></li><li><table><thead><tr><th align="left">id</th><th align="left">name</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">研发部</td></tr><tr><td align="left">2</td><td align="left">总经办</td></tr><tr><td align="left">3</td><td align="left">财务部</td></tr></tbody></table></li><li><h4 id="4-表间关系"><a href="#4-表间关系" class="headerlink" title="4. 表间关系"></a><strong>4. 表间关系</strong></h4></li><li><ul><li><strong>外键关联</strong>：<code>employees.dept_id</code> 字段关联 <code>departments.id</code>，实现数据关联查询。</li></ul></li></ul><p><img src="/imgs/$%7Bfiilename%7D/image-20250429202712838.png" alt="image-20250429202712838"></p><h2 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h2><ol><li>SQL语句可以单行或多行书写，以分号结尾。</li><li>SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</li><li>注释：<ul><li>单行注释：– 注释内容 或 # 注释内容(MySQL特有)</li><li>多行注释：&#x2F;* 注释内容 *&#x2F;</li></ul></li></ol><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><p><img src="/imgs/$%7Bfiilename%7D/image-20250429203118646.png" alt="image-20250429203118646"></p><h3 id="1-DDL"><a href="#1-DDL" class="headerlink" title="1.DDL"></a>1.DDL</h3><p><img src="/imgs/$%7Bfiilename%7D/image-20250505222119272.png" alt="image-20250505222119272"></p><h4 id="表操作-查询"><a href="#表操作-查询" class="headerlink" title="表操作-查询"></a>表操作-查询</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20250505224322941.png" alt="image-20250505224322941"></p><p><img src="/imgs/$%7Bfiilename%7D/image-20250505230045343.png" alt="image-20250505230045343"></p><h4 id="表操作-数据类型"><a href="#表操作-数据类型" class="headerlink" title="表操作-数据类型"></a>表操作-数据类型</h4><p>MySQL数据类型有很多，主要分为三类:数值类型、字符串类型、日期时间类型。</p><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><p><img src="/imgs/$%7Bfiilename%7D/image-20250505233841051.png" alt="image-20250505233841051"></p><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><p><img src="/imgs/$%7Bfiilename%7D/image-20250505233811905.png" alt="image-20250505233811905"></p><h5 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h5><p><img src="/imgs/$%7Bfiilename%7D/image-20250505233742649.png" alt="image-20250505233742649"></p><h4 id="表操作-修改"><a href="#表操作-修改" class="headerlink" title="表操作-修改"></a>表操作-修改</h4><p><strong>添加字段</strong>：提供了一个SQL语句模板，用于向数据库表中添加新的字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];**</span><br></pre></td></tr></table></figure><p>案例：给出了一个具体的SQL语句示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp <span class="keyword">ADD</span> nickname <span class="type">varchar</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;昵称&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>这个示例中，<code>emp</code> 是表名。</li><li><code>nickname</code> 是要添加的新字段名。</li><li><code>varchar(20)</code> 指定了字段的数据类型为可变长度字符串，最大长度为20个字符。</li><li><code>COMMENT &#39;昵称&#39;</code> 为字段添加了注释“昵称”，说明这个字段是用来存储员工昵称的。****</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">修改数据类型</span><br><span class="line">ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</span><br><span class="line"></span><br><span class="line">修改字段名和字段类型</span><br><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line">将emp表的nickname字段修改为username，类型为varchar(30)</span><br><span class="line">ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#x27;昵称&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">删除字段</span><br><span class="line">ALTER TABLE 表名 DROP 字段名;</span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line">将emp表的字段username删除</span><br><span class="line"></span><br><span class="line">ALTER TABLE emp DROP username;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修改表名</span><br><span class="line">ALTER TABLE 表名 RENAME TO 新表名;</span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line">将emp表的表名修改为 employee</span><br><span class="line"></span><br><span class="line">ALTER TABLE emp RENAME TO employee;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">删除表</span><br><span class="line">DROP TABLE [ IF EXISTS ] 表名;</span><br><span class="line"></span><br><span class="line">删除指定表，并重新创建该表</span><br><span class="line">TRUNCATE TABLE 表名;</span><br></pre></td></tr></table></figure><h3 id="2-DML-增删改"><a href="#2-DML-增删改" class="headerlink" title="2.DML(增删改)"></a>2.DML(增删改)</h3><h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20250506212218340.png" alt="image-20250506212218340"></p><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20250506235228677.png" alt="image-20250506235228677"></p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20250506235253234.png" alt="image-20250506235253234"></p><h3 id="3-DQL-查询"><a href="#3-DQL-查询" class="headerlink" title="3.DQL(查询)"></a>3.DQL(查询)</h3><p><img src="/imgs/$%7Bfiilename%7D/image-20250507215132985.png" alt="image-20250507215132985"></p><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询<img src="/imgs/$%7Bfiilename%7D/image-20250507215154856.png" alt="image-20250507215154856"></h4><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20250507215221576.png" alt="image-20250507215221576"></p><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20250507215251205.png" alt="image-20250507215251205"></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20250507215359519.png" alt="image-20250507215359519"></p><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20250507215417967.png" alt="image-20250507215417967"></p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p><img src="/imgs/$%7Bfiilename%7D/image-20250507215443439.png" alt="image-20250507215443439"></p><h3 id="SQL-查询的编写顺序与执行顺序对比"><a href="#SQL-查询的编写顺序与执行顺序对比" class="headerlink" title="SQL 查询的编写顺序与执行顺序对比"></a>SQL 查询的编写顺序与执行顺序对比</h3><h4 id="1-编写顺序（程序员书写-SQL-的顺序）"><a href="#1-编写顺序（程序员书写-SQL-的顺序）" class="headerlink" title="1. 编写顺序（程序员书写 SQL 的顺序）"></a>1. 编写顺序（程序员书写 SQL 的顺序）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表       -- 4. 选择要查询的列</span><br><span class="line">FROM 表名列表         -- 1. 确定数据来源</span><br><span class="line">WHERE 条件列表        -- 2. 筛选行数据</span><br><span class="line">GROUP BY 分组字段列表  -- 3. 分组聚合</span><br><span class="line">HAVING 分组后条件列表  -- 5. 筛选分组结果</span><br><span class="line">ORDER BY 排序字段列表  -- 6. 排序结果</span><br><span class="line">LIMIT 分页参数        -- 7. 分页限制</span><br></pre></td></tr></table></figure><h4 id="2-执行顺序（数据库实际执行的顺序）"><a href="#2-执行顺序（数据库实际执行的顺序）" class="headerlink" title="2. 执行顺序（数据库实际执行的顺序）"></a>2. 执行顺序（数据库实际执行的顺序）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM 表名列表         -- 1. 加载表数据</span><br><span class="line">WHERE 条件列表        -- 2. 逐行筛选符合条件的记录</span><br><span class="line">GROUP BY 分组字段列表  -- 3. 对筛选后的数据分组</span><br><span class="line">HAVING 分组后条件列表  -- 4. 筛选分组后的结果集</span><br><span class="line">SELECT 字段列表       -- 5. 选择最终显示的列</span><br><span class="line">ORDER BY 排序字段列表  -- 6. 对结果排序</span><br><span class="line">LIMIT 分页参数        -- 7. 返回指定范围的数据</span><br></pre></td></tr></table></figure><p>总结：</p><p><img src="/imgs/$%7Bfiilename%7D/image-20250507224553234.png" alt="image-20250507224553234"></p><h3 id="4-DCL"><a href="#4-DCL" class="headerlink" title="4.DCL"></a>4.DCL</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(上)</title>
      <link href="/2025/03/24/JavaSE/"/>
      <url>/2025/03/24/JavaSE/</url>
      
        <content type="html"><![CDATA[<h1 id="常见API"><a href="#常见API" class="headerlink" title="常见API"></a>常见API</h1><h2 id="1-Math"><a href="#1-Math" class="headerlink" title="1.Math"></a>1.Math</h2><p>注意：方法都是静态的。</p><img src="/2025/03/24/JavaSE/image-20250218224144107.png" class="" title="image-20250218224144107"><p>​      sqrt  返回a的平方根</p><p>​      cbrt 返回a的立方根</p><p>练习一：判断一个数是否为一个质数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Math1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(isPrime(<span class="number">997</span>));</span><br><span class="line">        <span class="comment">//判断一个数是否为质数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; Math.sqrt(number); i++) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习二</p><img src="/2025/03/24/JavaSE/image-20250218232919677.png" class="" title="image-20250218232919677"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Math2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//要求1:统计水仙花数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//三位数100-999</span></span><br><span class="line">        <span class="comment">//845</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">3</span>)+Math.pow(shi,<span class="number">3</span>)+Math.pow(bai,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line"><span class="comment">//                System.out.println(i);</span></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求2：证明没有两位的自幂数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>; i &lt;= <span class="number">99</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">2</span>)+Math.pow(shi,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line"><span class="comment">//                System.out.println(i);</span></span><br><span class="line">                count1++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求3：四叶玫瑰数和五角星数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1000</span>; i &lt;= <span class="number">9999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> i/<span class="number">1000</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">4</span>)+Math.pow(shi,<span class="number">4</span>)+Math.pow(bai,<span class="number">4</span>)+Math.pow(qian,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                count2++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count2);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count3</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求3：四叶玫瑰数和五角星数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10000</span>; i &lt;= <span class="number">99999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> i/<span class="number">1000</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">wan</span> <span class="operator">=</span> i/<span class="number">10000</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">5</span>)+Math.pow(shi,<span class="number">5</span>)+Math.pow(bai,<span class="number">5</span>)+Math.pow(qian,<span class="number">5</span>)+Math.pow(wan,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                count3++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-System"><a href="#2-System" class="headerlink" title="2.System"></a>2.System</h2><p>工具类</p><p>时间原点：1970.1.1.0点</p><p>1s &#x3D;1000ms</p><img src="/2025/03/24/JavaSE/image-20250219205626612.png" class="" title="image-20250219205626612"><p>System.arraycopy（arr1，0，arr2，4，3）</p><p><strong>参数一：数据源，要拷贝的数据从哪个数组而来<br>参数二：从数据源数组中的第几个索引开始拷贝<br>参数三：目的地，我要把数据拷贝到哪个数组中<br>参数四：目的地数组的索引。<br>参数五：拷贝的个数</strong></p><p>注意：</p><p>1.数据源数组和目的地数组都是基本数据类型，那么两者的类型必须保持一致，否则会报错。</p><p>2.在拷贝的时候需要考虑数组的长度，超出范围也会报错。</p><p>3.如果数据源数组和目的地数组都是引用数据类型，那么子类类型可以赋值给父类类型。</p><h2 id="3-Runtime"><a href="#3-Runtime" class="headerlink" title="3.Runtime"></a>3.Runtime</h2><img src="/2025/03/24/JavaSE/image-20250219224656571.png" class="" title="image-20250219224656571"><h2 id="4-Object"><a href="#4-Object" class="headerlink" title="4.Object"></a>4.Object</h2><img src="/2025/03/24/JavaSE/image-20250301142716334.png" class="" title="image-20250301142716334"><p>注意equals方法：</p><img src="/2025/03/24/JavaSE/image-20250301150624191.png" class="" title="image-20250301150624191"><h3 id="4-1-对象克隆"><a href="#4-1-对象克隆" class="headerlink" title="4.1 对象克隆"></a>4.1 对象克隆</h3><img src="/2025/03/24/JavaSE/image-20250301151016470.png" class="" title="image-20250301151016470"><img src="/2025/03/24/JavaSE/image-20250301201049895.png" class="" title="image-20250301201049895"><img src="/2025/03/24/JavaSE/image-20250301201424732.png" class="" title="image-20250301201424732"><img src="/2025/03/24/JavaSE/image-20250301201542555.png" class="" title="image-20250301201542555"><p><strong>总结</strong></p><ol><li>Object是java中的顶级父类。 所有的类都直接或间接的继承于Object类。</li><li>toString()：一般会重写，打印对象时打印属性</li><li>equals()：比较对象时会重写，比较对象属性值是否相同</li><li>clone()：默认浅克隆。</li></ol><p>如果需要深克隆需要重写方法或者使用第三方工具类。</p><h3 id="4-2-Objects"><a href="#4-2-Objects" class="headerlink" title="4.2 Objects"></a>4.2 Objects</h3><img src="/2025/03/24/JavaSE/image-20250301224628567.png" class="" title="image-20250301224628567"><p>总结</p><ol><li>Objects是一个对象工具类，提供了一些操作对象的方法</li><li>equals(对象1，对象2)：先做非空判断，比较两个对象</li><li>isNull(对象)：判断对象是否为空</li><li>nonNull(对象)：判断对象是否不是空</li></ol><h3 id="4-3-BigInteger"><a href="#4-3-BigInteger" class="headerlink" title="4.3 BigInteger"></a>4.3 BigInteger</h3><p>java中，整数有四种类型：byte，short，int，long。</p><p>在底层占用字节个数：byte1字节，short2，int4，long8。</p><img src="/2025/03/24/JavaSE/image-20250305232434592.png" class="" title="image-20250305232434592"><img src="/2025/03/24/JavaSE/image-20250305234345876.png" class="" title="image-20250305234345876"><p>1.一般数据比较小，用valueof获取。</p><p>2.如果超出long的取值范围，或者不确定用多大数字，用普通构造方法。</p><p>3.对象一旦创建，BigInteger内部记录的值不能发生改变。<br>4.只要进行计算都会产生一个新的BigInteger对象</p><img src="/2025/03/24/JavaSE/image-20250305234709306.png" class="" title="image-20250305234709306"> <img src="/2025/03/24/JavaSE/image-20250306000421856.png" class="" title="image-20250306000421856"><h3 id="4-4-BigDecima-小数的精确计算"><a href="#4-4-BigDecima-小数的精确计算" class="headerlink" title="4.4 BigDecima(小数的精确计算)"></a>4.4 BigDecima(小数的精确计算)</h3><img src="/2025/03/24/JavaSE/image-20250315143132692.png" class="" title="image-20250315143132692"><img src="/2025/03/24/JavaSE/image-20250315164032257.png" class="" title="image-20250315164032257"><p>总结</p><ol><li><p>BigDecimal的作用是什么？</p><ul><li>表示较大的小数和解决小数运算精度失真问题。</li></ul></li><li><p>BigDecimal的对象如何获取？</p><ul><li>BigDecimal bd1 &#x3D; new BigDecimal(“较大的小数”);</li><li>BigDecimal bd2 &#x3D; BigDecimal.valueOf(0.1);</li></ul></li><li><p>常见操作<br>加：add<br>减：subtract<br>乘：multiply<br>除：divide（四舍五入：RoundingMode.HALF_UP）</p></li></ol><h2 id="5-正则表达式（Pattern）"><a href="#5-正则表达式（Pattern）" class="headerlink" title="5.正则表达式（Pattern）"></a>5.正则表达式（Pattern）</h2><p>作用一：校验字符串是否满足规则</p><p>作用二：在一段文本中查找满足要求的内容</p><img src="/2025/03/24/JavaSE/image-20250315204453826.png" class="" title="image-20250315204453826"><img src="/2025/03/24/JavaSE/image-20250316132204393.png" class="" title="image-20250316132204393"><img src="/2025/03/24/JavaSE/image-20250316132412539.png" class="" title="image-20250316132412539"><h2 id="6-爬虫"><a href="#6-爬虫" class="headerlink" title="6.爬虫"></a>6.爬虫</h2><p>爬对象的基础固定方式如下：</p><img src="/2025/03/24/JavaSE/image-20250316162909096.png" class="" title="image-20250316162909096"><p>Java当中默认的是贪婪爬取，但是在+或者*后面加上问号，此时就是非贪婪爬取。</p><img src="/2025/03/24/JavaSE/image-20250316173424750.png" class="" title="image-20250316173424750"><img src="/2025/03/24/JavaSE/image-20250316210019404.png" class="" title="image-20250316210019404"><img src="/2025/03/24/JavaSE/image-20250316231316320.png" class="" title="image-20250316231316320"><p>这张图片是一个关于正则表达式中分组的总结。具体内容如下：</p><ol><li><p><strong>正则表达式中的分组有两种：</strong></p><ul><li>捕获分组</li><li>非捕获分组</li></ul></li><li><p><strong>捕获分组（默认）：</strong></p><ul><li>可以获取每组中的内容并反复使用。</li></ul></li><li><p><strong>组号的特点：</strong></p><ul><li>从1开始，连续不间断。</li><li>以左括号为基准，最左边的是第一组。</li></ul></li><li><p><strong>非捕获分组：</strong></p><ul><li>分组之后不需要再用本组数据，仅仅把数据括起来，不占组号。</li><li>（？：）获取所有，（？&#x3D;）获取的时候，只要前面部分，（？！）排除掉后面的</li></ul></li></ol><p>这些信息对于理解和使用正则表达式中的分组功能非常有帮助。</p><h2 id="7-包装类"><a href="#7-包装类" class="headerlink" title="7.包装类"></a>7.包装类</h2><img src="/2025/03/24/JavaSE/image-20250317235803155.png" class="" title="image-20250317235803155"><img src="/2025/03/24/JavaSE/image-20250318000708629.png" class="" title="image-20250318000708629"><h2 id="8-练习"><a href="#8-练习" class="headerlink" title="8.练习"></a>8.练习</h2><img src="/2025/03/24/JavaSE/image-20250318235026307.png" class="" title="image-20250318235026307"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">program2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//字符串中只能是数字不能有其他字符</span></span><br><span class="line">        <span class="comment">//最少一位，最多十位</span></span><br><span class="line">        <span class="comment">//0不能开头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义一个字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123a&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.校验字符串</span></span><br><span class="line">        <span class="keyword">if</span>(!str.matches(<span class="string">&quot;[1-9]\\d&#123;0,9&#125;&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;格式错误&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;格式正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span>str.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            num = num*<span class="number">10</span>+a;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println(num+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/03/24/JavaSE/581d2947d29b2317d44c8d17d985b629_720.png" class="" title="img"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Regexdemo3</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">/*定义一个方法实现toBinaryString方法效果，即将十进制数转成二进制数 */</span></span><br><span class="line">            System.out.println(toBinaryString(<span class="number">123</span>));</span><br><span class="line">            System.out.println(Integer.toBinaryString(<span class="number">123</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toBinaryString</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不断除以2 ，得到余数，一直到商为0就结束</span></span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//利用循环不断的除以2获取余数</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (number==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//要先获取余数再除以2</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">remaindar</span> <span class="operator">=</span>number % <span class="number">2</span>;</span><br><span class="line">                <span class="comment">//倒着拼接</span></span><br><span class="line">                sb.insert(<span class="number">0</span>,remaindar);</span><br><span class="line">                <span class="comment">//除以2</span></span><br><span class="line">                number =number/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/2025/03/24/JavaSE/image-20250319234858222.png" class="" title="image-20250319234858222"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">regexdemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//JDK7</span></span><br><span class="line">        <span class="comment">/*1.计算出生年月日的毫秒值*/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="string">&quot;2000年1月1日&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yy年y月y日&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span>sdf.parse(birthday);</span><br><span class="line">        <span class="type">long</span> <span class="variable">birthtime</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">        <span class="type">long</span> <span class="variable">todaytime</span> <span class="operator">=</span>System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> todaytime - birthtime;</span><br><span class="line">        System.out.println(time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDK8</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span>LocalDate.now();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">days</span> <span class="operator">=</span> ChronoUnit.DAYS.between(ld1,ld2);</span><br><span class="line"></span><br><span class="line">        System.out.println(days);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JAVASE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(下)</title>
      <link href="/2025/03/24/hello-world/"/>
      <url>/2025/03/24/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="常见JAVASE"><a href="#常见JAVASE" class="headerlink" title="常见JAVASE"></a>常见JAVASE</h1><h2 id="1-Math"><a href="#1-Math" class="headerlink" title="1.Math"></a>1.Math</h2><p>注意：方法都是静态的。</p><p><img src="/JAVASE/image-20250218224144107.png" alt="image-20250218224144107"></p><p>​      sqrt  返回a的平方根</p><p>​      cbrt 返回a的立方根</p><p>练习一：判断一个数是否为一个质数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Math1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(isPrime(<span class="number">997</span>));</span><br><span class="line">        <span class="comment">//判断一个数是否为质数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; Math.sqrt(number); i++) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习二</p><p><img src="/JAVASE/image-20250218232919677.png" alt="image-20250218232919677"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Math2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//要求1:统计水仙花数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//三位数100-999</span></span><br><span class="line">        <span class="comment">//845</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">3</span>)+Math.pow(shi,<span class="number">3</span>)+Math.pow(bai,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line"><span class="comment">//                System.out.println(i);</span></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求2：证明没有两位的自幂数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>; i &lt;= <span class="number">99</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">2</span>)+Math.pow(shi,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line"><span class="comment">//                System.out.println(i);</span></span><br><span class="line">                count1++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求3：四叶玫瑰数和五角星数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1000</span>; i &lt;= <span class="number">9999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> i/<span class="number">1000</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">4</span>)+Math.pow(shi,<span class="number">4</span>)+Math.pow(bai,<span class="number">4</span>)+Math.pow(qian,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                count2++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count2);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count3</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求3：四叶玫瑰数和五角星数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10000</span>; i &lt;= <span class="number">99999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> i/<span class="number">1000</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">wan</span> <span class="operator">=</span> i/<span class="number">10000</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">5</span>)+Math.pow(shi,<span class="number">5</span>)+Math.pow(bai,<span class="number">5</span>)+Math.pow(qian,<span class="number">5</span>)+Math.pow(wan,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                count3++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-System"><a href="#2-System" class="headerlink" title="2.System"></a>2.System</h2><p>工具类</p><p>时间原点：1970.1.1.0点</p><p>1s &#x3D;1000ms</p><p><img src="/JAVASE/image-20250219205626612.png" alt="image-20250219205626612"></p><p>System.arraycopy（arr1，0，arr2，4，3）</p><p><strong>参数一：数据源，要拷贝的数据从哪个数组而来<br>参数二：从数据源数组中的第几个索引开始拷贝<br>参数三：目的地，我要把数据拷贝到哪个数组中<br>参数四：目的地数组的索引。<br>参数五：拷贝的个数</strong></p><p>注意：</p><p>1.数据源数组和目的地数组都是基本数据类型，那么两者的类型必须保持一致，否则会报错。</p><p>2.在拷贝的时候需要考虑数组的长度，超出范围也会报错。</p><p>3.如果数据源数组和目的地数组都是引用数据类型，那么子类类型可以赋值给父类类型。</p><h2 id="3-Runtime"><a href="#3-Runtime" class="headerlink" title="3.Runtime"></a>3.Runtime</h2><p><img src="/JAVASE/image-20250219224656571.png" alt="image-20250219224656571"></p><h2 id="4-Object"><a href="#4-Object" class="headerlink" title="4.Object"></a>4.Object</h2><p><img src="/JAVASE/image-20250301142716334.png" alt="image-20250301142716334"></p><p>注意equals方法：</p><p><img src="/JAVASE/image-20250301150624191.png" alt="image-20250301150624191"></p><h3 id="4-1-对象克隆"><a href="#4-1-对象克隆" class="headerlink" title="4.1 对象克隆"></a>4.1 对象克隆</h3><p><img src="/JAVASE/image-20250301151016470.png" alt="image-20250301151016470"></p><p><img src="/JAVASE/image-20250301201049895.png" alt="image-20250301201049895"></p><p><img src="/JAVASE/image-20250301201424732.png" alt="image-20250301201424732"></p><p><img src="/JAVASE/image-20250301201542555.png" alt="image-20250301201542555"></p><p><strong>总结</strong></p><ol><li>Object是java中的顶级父类。 所有的类都直接或间接的继承于Object类。</li><li>toString()：一般会重写，打印对象时打印属性</li><li>equals()：比较对象时会重写，比较对象属性值是否相同</li><li>clone()：默认浅克隆。</li></ol><p>如果需要深克隆需要重写方法或者使用第三方工具类。</p><h3 id="4-2-Objects"><a href="#4-2-Objects" class="headerlink" title="4.2 Objects"></a>4.2 Objects</h3><p><img src="/JAVASE/image-20250301224628567.png" alt="image-20250301224628567"></p><p>总结</p><ol><li>Objects是一个对象工具类，提供了一些操作对象的方法</li><li>equals(对象1，对象2)：先做非空判断，比较两个对象</li><li>isNull(对象)：判断对象是否为空</li><li>nonNull(对象)：判断对象是否不是空</li></ol><h3 id="4-3-BigInteger"><a href="#4-3-BigInteger" class="headerlink" title="4.3 BigInteger"></a>4.3 BigInteger</h3><p>java中，整数有四种类型：byte，short，int，long。</p><p>在底层占用字节个数：byte1字节，short2，int4，long8。</p><p><img src="/JAVASE/image-20250305232434592.png" alt="image-20250305232434592"></p><p><img src="/JAVASE/image-20250305234345876.png" alt="image-20250305234345876"></p><p>1.一般数据比较小，用valueof获取。</p><p>2.如果超出long的取值范围，或者不确定用多大数字，用普通构造方法。</p><p>3.对象一旦创建，BigInteger内部记录的值不能发生改变。<br>4.只要进行计算都会产生一个新的BigInteger对象</p><p><img src="/JAVASE/image-20250305234709306.png" alt="image-20250305234709306"> </p><p><img src="/JAVASE/image-20250306000421856.png" alt="image-20250306000421856"></p><h3 id="4-4-BigDecima-小数的精确计算"><a href="#4-4-BigDecima-小数的精确计算" class="headerlink" title="4.4 BigDecima(小数的精确计算)"></a>4.4 BigDecima(小数的精确计算)</h3><p><img src="/JAVASE/image-20250315143132692.png" alt="image-20250315143132692"></p><p><img src="/JAVASE/image-20250315164032257.png" alt="image-20250315164032257"></p><p>总结</p><ol><li><p>BigDecimal的作用是什么？</p><ul><li>表示较大的小数和解决小数运算精度失真问题。</li></ul></li><li><p>BigDecimal的对象如何获取？</p><ul><li>BigDecimal bd1 &#x3D; new BigDecimal(“较大的小数”);</li><li>BigDecimal bd2 &#x3D; BigDecimal.valueOf(0.1);</li></ul></li><li><p>常见操作<br>加：add<br>减：subtract<br>乘：multiply<br>除：divide（四舍五入：RoundingMode.HALF_UP）</p></li></ol><h2 id="5-正则表达式（Pattern）"><a href="#5-正则表达式（Pattern）" class="headerlink" title="5.正则表达式（Pattern）"></a>5.正则表达式（Pattern）</h2><p>作用一：校验字符串是否满足规则</p><p>作用二：在一段文本中查找满足要求的内容</p><p><img src="/JAVASE/image-20250315204453826.png" alt="image-20250315204453826"></p><p><img src="/JAVASE/image-20250316132204393.png" alt="image-20250316132204393"></p><p><img src="/JAVASE/image-20250316132412539.png" alt="image-20250316132412539"></p><h2 id="6-爬虫"><a href="#6-爬虫" class="headerlink" title="6.爬虫"></a>6.爬虫</h2><p>爬对象的基础固定方式如下：</p><p><img src="/JAVASE/image-20250316162909096.png" alt="image-20250316162909096"></p><p>Java当中默认的是贪婪爬取，但是在+或者*后面加上问号，此时就是非贪婪爬取。</p><p><img src="/JAVASE/image-20250316173424750.png" alt="image-20250316173424750"></p><p><img src="/JAVASE/image-20250316210019404.png" alt="image-20250316210019404"></p><p><img src="/JAVASE/image-20250316231316320.png" alt="image-20250316231316320"></p><p>这张图片是一个关于正则表达式中分组的总结。具体内容如下：</p><ol><li><p><strong>正则表达式中的分组有两种：</strong></p><ul><li>捕获分组</li><li>非捕获分组</li></ul></li><li><p><strong>捕获分组（默认）：</strong></p><ul><li>可以获取每组中的内容并反复使用。</li></ul></li><li><p><strong>组号的特点：</strong></p><ul><li>从1开始，连续不间断。</li><li>以左括号为基准，最左边的是第一组。</li></ul></li><li><p><strong>非捕获分组：</strong></p><ul><li>分组之后不需要再用本组数据，仅仅把数据括起来，不占组号。</li><li>（？：）获取所有，（？&#x3D;）获取的时候，只要前面部分，（？！）排除掉后面的</li></ul></li></ol><p>这些信息对于理解和使用正则表达式中的分组功能非常有帮助。</p><h2 id="7-包装类"><a href="#7-包装类" class="headerlink" title="7.包装类"></a>7.包装类</h2><p><img src="/JAVASE/image-20250317235803155.png" alt="image-20250317235803155"></p><p><img src="/JAVASE/image-20250318000708629.png" alt="image-20250318000708629"></p><h2 id="8-练习"><a href="#8-练习" class="headerlink" title="8.练习"></a>8.练习</h2><p><img src="/JAVASE/image-20250318235026307.png" alt="image-20250318235026307"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">program2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//字符串中只能是数字不能有其他字符</span></span><br><span class="line">        <span class="comment">//最少一位，最多十位</span></span><br><span class="line">        <span class="comment">//0不能开头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义一个字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123a&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.校验字符串</span></span><br><span class="line">        <span class="keyword">if</span>(!str.matches(<span class="string">&quot;[1-9]\\d&#123;0,9&#125;&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;格式错误&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;格式正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span>str.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            num = num*<span class="number">10</span>+a;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println(num+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/JAVASE/581d2947d29b2317d44c8d17d985b629_720.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Regexdemo3</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">/*定义一个方法实现toBinaryString方法效果，即将十进制数转成二进制数 */</span></span><br><span class="line">            System.out.println(toBinaryString(<span class="number">123</span>));</span><br><span class="line">            System.out.println(Integer.toBinaryString(<span class="number">123</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toBinaryString</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不断除以2 ，得到余数，一直到商为0就结束</span></span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//利用循环不断的除以2获取余数</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (number==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//要先获取余数再除以2</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">remaindar</span> <span class="operator">=</span>number % <span class="number">2</span>;</span><br><span class="line">                <span class="comment">//倒着拼接</span></span><br><span class="line">                sb.insert(<span class="number">0</span>,remaindar);</span><br><span class="line">                <span class="comment">//除以2</span></span><br><span class="line">                number =number/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/JAVASE/image-20250319234858222.png" alt="image-20250319234858222"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">regexdemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//JDK7</span></span><br><span class="line">        <span class="comment">/*1.计算出生年月日的毫秒值*/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="string">&quot;2000年1月1日&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yy年y月y日&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span>sdf.parse(birthday);</span><br><span class="line">        <span class="type">long</span> <span class="variable">birthtime</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">        <span class="type">long</span> <span class="variable">todaytime</span> <span class="operator">=</span>System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> todaytime - birthtime;</span><br><span class="line">        System.out.println(time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDK8</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span>LocalDate.now();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">days</span> <span class="operator">=</span> ChronoUnit.DAYS.between(ld1,ld2);</span><br><span class="line"></span><br><span class="line">        System.out.println(days);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常见的七种查找算法："><a href="#常见的七种查找算法：" class="headerlink" title="常见的七种查找算法："></a>常见的七种查找算法：</h1><p>​数据结构是数据存储的方式，算法是数据计算的方式。所以在开发中，算法和数据结构息息相关。今天的讲义中会涉及部分数据结构的专业名词，如果各位铁粉有疑惑，可以先看一下哥们后面录制的数据结构，再回头看算法。</p><h2 id="1-基本查找"><a href="#1-基本查找" class="headerlink" title="1. 基本查找"></a>1. 基本查找</h2><p>​也叫做顺序查找</p><p>​        说明：顺序查找适合于存储结构为数组或者链表。</p><p><strong>基本思想</strong>：顺序查找也称为线形查找，属于无序查找算法。从数据结构线的一端开始，顺序扫描，依次将遍历到的结点与要查找的值相比较，若相等则表示查找成功；若遍历结束仍没有找到相同的，表示查找失败。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//顺序查找</span></span><br><span class="line">        <span class="comment">//从0所以挨个往后开始查找</span></span><br><span class="line">        <span class="comment">//需求：定义一个方法利用基本查找，查询某个元素是否存在</span></span><br><span class="line">        <span class="type">int</span>[] arr =&#123;<span class="number">131</span>,<span class="number">127</span>,<span class="number">147</span>,<span class="number">81</span>,<span class="number">103</span>,<span class="number">24</span>,<span class="number">3</span>,<span class="number">79</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr1 =&#123;<span class="number">131</span>,<span class="number">127</span>,<span class="number">147</span>,<span class="number">81</span>,<span class="number">103</span>,<span class="number">24</span>,<span class="number">3</span>,<span class="number">79</span>,<span class="number">81</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span><span class="number">81</span>;</span><br><span class="line">        System.out.println(bassicSearch(arr,number));</span><br><span class="line">        System.out.println(basicindex(arr,number));</span><br><span class="line">        System.out.println(basicindex1(arr1,number));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">bassicSearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺序查找，不考虑重复元素，返回索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">basicindex</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//考虑重复元素，返回索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title function_">basicindex1</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == number)&#123;</span><br><span class="line">                list.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h2><p>​也叫做折半查找</p><p>说明：元素必须是有序的，从小到大，或者从大到小都是可以的。</p><p>如果是无序的，也可以先进行排序。但是排序之后，会改变原有数据的顺序，查找出来元素位置跟原来的元素可能是不一样的，所以排序之后再查找只能判断当前数据是否在容器当中，返回的索引无实际的意义。</p><p>　　<strong>基本思想</strong>：也称为是折半查找，属于有序查找算法。用给定值先与中间结点比较。比较完之后有三种情况：</p><ul><li><p>相等</p><p>说明找到了</p></li><li><p>要查找的数据比中间节点小</p><p>说明要查找的数字在中间节点左边</p></li><li><p>要查找的数据比中间节点大</p><p>说明要查找的数字在中间节点右边</p></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_BinarySearchDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//二分查找/折半查找</span></span><br><span class="line">        <span class="comment">//核心：</span></span><br><span class="line">        <span class="comment">//每次排除一半的查找范围</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求：定义一个方法利用二分查找，查询某个元素在数组中的索引</span></span><br><span class="line">        <span class="comment">//数据如下：&#123;7, 23, 79, 81, 103, 127, 131, 147&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">7</span>, <span class="number">23</span>, <span class="number">79</span>, <span class="number">81</span>, <span class="number">103</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">147</span>&#125;;</span><br><span class="line">        System.out.println(binarySearch(arr, <span class="number">150</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用循环不断的去找要查找的数据</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min &gt; max)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.找到min和max的中间位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (min + max) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//4.拿着mid指向的元素跟要查找的元素进行比较</span></span><br><span class="line">            <span class="keyword">if</span>(arr[mid] &gt; number)&#123;</span><br><span class="line">                <span class="comment">//4.1 number在mid的左边</span></span><br><span class="line">                <span class="comment">//min不变，max = mid - 1；</span></span><br><span class="line">                max = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &lt; number)&#123;</span><br><span class="line">                <span class="comment">//4.2 number在mid的右边</span></span><br><span class="line">                <span class="comment">//max不变，min = mid + 1;</span></span><br><span class="line">                min = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//4.3 number跟mid指向的元素一样</span></span><br><span class="line">                <span class="comment">//找到了</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-插值查找"><a href="#3-插值查找" class="headerlink" title="3. 插值查找"></a>3. 插值查找</h2><p>在介绍插值查找之前，先考虑一个问题：</p><p>​为什么二分查找算法一定要是折半，而不是折四分之一或者折更多呢？</p><p>其实就是因为方便，简单，但是如果我能在二分查找的基础上，让中间的mid点，尽可能靠近想要查找的元素，那不就能提高查找的效率了吗？</p><p>二分查找中查找点计算如下：</p><p>　　mid&#x3D;(low+high)&#x2F;2, 即mid&#x3D;low+1&#x2F;2*(high-low);</p><p>我们可以将查找的点改进为如下：</p><p>　　mid&#x3D;low+(key-a[low])&#x2F;(a[high]-a[low])*(high-low)，</p><p>这样，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。</p><p>　　基本思想：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。</p><p>**细节：**对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。</p><p>代码跟二分查找类似，只要修改一下mid的计算方式即可。</p><h2 id="4-斐波那契查找"><a href="#4-斐波那契查找" class="headerlink" title="4. 斐波那契查找"></a>4. 斐波那契查找</h2><p>在介绍斐波那契查找算法之前，我们先介绍一下很它紧密相连并且大家都熟知的一个概念——黄金分割。</p><p>　　黄金比例又称黄金分割，是指事物各部分间一定的数学比例关系，即将整体一分为二，较大部分与较小部分之比等于整体与较大部分之比，其比值约为1:0.618或1.618:1。</p><p>　　0.618被公认为最具有审美意义的比例数字，这个数值的作用不仅仅体现在诸如绘画、雕塑、音乐、建筑等艺术领域，而且在管理、工程设计等方面也有着不可忽视的作用。因此被称为黄金分割。</p><p>　　在数学中有一个非常有名的数学规律：斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89…….</p><p>（从第三个数开始，后边每一个数都是前两个数的和）。</p><p>然后我们会发现，随着斐波那契数列的递增，前后两个数的比值会越来越接近0.618，利用这个特性，我们就可以将黄金比例运用到查找技术中。</p><p><img src="https://img-blog.csdn.net/20150323100632467?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbmJvMjAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"> </p><p>基本思想：也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。</p><p>斐波那契查找也是在二分查找的基础上进行了优化，优化中间点mid的计算方式即可</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeiBoSearchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">89</span>, <span class="number">1000</span>, <span class="number">1234</span>&#125;;</span><br><span class="line">        System.out.println(search(arr, <span class="number">1234</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] getFeiBo() &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class="line">            arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//表示斐波那契数分割数的下标值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//调用斐波那契数列</span></span><br><span class="line">        <span class="type">int</span>[] f = getFeiBo();</span><br><span class="line">        <span class="comment">//获取斐波那契分割数值的下标</span></span><br><span class="line">        <span class="keyword">while</span> (high &gt; (f[index] - <span class="number">1</span>)) &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为f[k]值可能大于a的长度，因此需要使用Arrays工具类，构造一个新法数组，并指向temp[],不足的部分会使用0补齐</span></span><br><span class="line">        <span class="type">int</span>[] temp = Arrays.copyOf(arr, f[index]);</span><br><span class="line">        <span class="comment">//实际需要使用arr数组的最后一个数来填充不足的部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> high + <span class="number">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            temp[i] = arr[high];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用while循环处理，找到key值</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = low + f[index - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; temp[mid]) &#123;<span class="comment">//向数组的前面部分进行查找</span></span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  对k--进行理解</span></span><br><span class="line"><span class="comment">                  1.全部元素=前面的元素+后面的元素</span></span><br><span class="line"><span class="comment">                  2.f[k]=k[k-1]+f[k-2]</span></span><br><span class="line"><span class="comment">                  因为前面有k-1个元素没所以可以继续分为f[k-1]=f[k-2]+f[k-3]</span></span><br><span class="line"><span class="comment">                  即在f[k-1]的前面继续查找k--</span></span><br><span class="line"><span class="comment">                  即下次循环,mid=f[k-1-1]-1</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                index--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; temp[mid]) &#123;<span class="comment">//向数组的后面的部分进行查找</span></span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">                index -= <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//找到了</span></span><br><span class="line">                <span class="comment">//需要确定返回的是哪个下标</span></span><br><span class="line">                <span class="keyword">if</span> (mid &lt;= high) &#123;</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> high;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-分块查找"><a href="#5-分块查找" class="headerlink" title="5. 分块查找"></a>5. 分块查找</h2><p>当数据表中的数据元素很多时，可以采用分块查找。</p><p>汲取了顺序查找和折半查找各自的优点，既有动态结构，又适于快速查找</p><p>分块查找适用于数据较多，但是数据不会发生变化的情况，如果需要一边添加一边查找，建议使用哈希查找</p><p>分块查找的过程：</p><ol><li>需要把数据分成N多小块，块与块之间不能有数据重复的交集。</li><li>给每一块创建对象单独存储到数组当中</li><li>查找数据的时候，先在数组查，当前数据属于哪一块</li><li>再到这一块中顺序查找</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_BlockSearchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            分块查找</span></span><br><span class="line"><span class="comment">            核心思想：</span></span><br><span class="line"><span class="comment">                块内无序，块间有序</span></span><br><span class="line"><span class="comment">            实现步骤：</span></span><br><span class="line"><span class="comment">                1.创建数组blockArr存放每一个块对象的信息</span></span><br><span class="line"><span class="comment">                2.先查找blockArr确定要查找的数据属于哪一块</span></span><br><span class="line"><span class="comment">                3.再单独遍历这一块数据即可</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">16</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>,<span class="number">21</span>, <span class="number">18</span>,</span><br><span class="line">                     <span class="number">32</span>, <span class="number">23</span>, <span class="number">37</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">34</span>,</span><br><span class="line">                     <span class="number">50</span>, <span class="number">48</span>, <span class="number">61</span>, <span class="number">52</span>, <span class="number">73</span>, <span class="number">66</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建三个块的对象</span></span><br><span class="line">        <span class="type">Block</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">21</span>,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">45</span>,<span class="number">6</span>,<span class="number">11</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">73</span>,<span class="number">12</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义数组用来管理三个块的对象（索引表）</span></span><br><span class="line">        Block[] blockArr = &#123;b1,b2,b3&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个变量用来记录要查找的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，传递索引表，数组，要查找的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(blockArr,arr,number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印一下</span></span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用分块查找的原理，查询number的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Block[] blockArr, <span class="type">int</span>[] arr, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">//1.确定number是在那一块当中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexBlock</span> <span class="operator">=</span> findIndexBlock(blockArr, number);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(indexBlock == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//表示number不在数组当中</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取这一块的起始索引和结束索引   --- 30</span></span><br><span class="line">        <span class="comment">// Block b1 = new Block(21,0,5);   ----  0</span></span><br><span class="line">        <span class="comment">// Block b2 = new Block(45,6,11);  ----  1</span></span><br><span class="line">        <span class="comment">// Block b3 = new Block(73,12,17); ----  2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> blockArr[indexBlock].getStartIndex();</span><br><span class="line">        <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> blockArr[indexBlock].getEndIndex();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= endIndex; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用来确定number在哪一块当中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findIndexBlock</span><span class="params">(Block[] blockArr,<span class="type">int</span> number)</span>&#123; <span class="comment">//100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从0索引开始遍历blockArr，如果number小于max，那么就表示number是在这一块当中的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; blockArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(number &lt;= blockArr[i].getMax())&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> max;<span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startIndex;<span class="comment">//起始索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> endIndex;<span class="comment">//结束索引</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">(<span class="type">int</span> max, <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStartIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartIndex</span><span class="params">(<span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEndIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndIndex</span><span class="params">(<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Block&#123;max = &quot;</span> + max + <span class="string">&quot;, startIndex = &quot;</span> + startIndex + <span class="string">&quot;, endIndex = &quot;</span> + endIndex + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-哈希查找"><a href="#6-哈希查找" class="headerlink" title="6. 哈希查找"></a>6. 哈希查找</h2><p>哈希查找是分块查找的进阶版，适用于数据一边添加一边查找的情况。</p><p>一般是数组 + 链表的结合体或者是数组+链表 + 红黑树的结合体</p><p>在课程中，为了让大家方便理解，所以规定：</p><ul><li>数组的0索引处存储1~100</li><li>数组的1索引处存储101~200</li><li>数组的2索引处存储201~300</li><li>以此类推</li></ul><p>但是实际上，我们一般不会采取这种方式，因为这种方式容易导致一块区域添加的元素过多，导致效率偏低。</p><p>更多的是先计算出当前数据的哈希值，用哈希值跟数组的长度进行计算，计算出应存入的位置，再挂在数组的后面形成链表，如果挂的元素太多而且数组长度过长，我们也会把链表转化为红黑树，进一步提高效率。</p><p>具体的过程，大家可以参见B站阿玮讲解课程：从入门到起飞。在集合章节详细讲解了哈希表的数据结构。全程采取动画形式讲解，让大家一目了然。</p><p>在此不多做阐述。</p><p><img src="/Algorithm/Snipaste_2022-09-05_21-36-50.png" alt="Snipaste_2022-09-05_21-36-50"></p><h2 id="7-树表查找"><a href="#7-树表查找" class="headerlink" title="7. 树表查找"></a>7. 树表查找</h2><p>本知识点涉及到数据结构：树。</p><p>建议先看一下后面阿玮讲解的数据结构，再回头理解。</p><p>基本思想：二叉查找树是先对待查找的数据进行生成树，确保树的左分支的值小于右分支的值，然后在就行和每个节点的父节点比较大小，查找最适合的范围。 这个算法的查找效率很高，但是如果使用这种查找方法要首先创建树。 </p><p>　　二叉查找树（BinarySearch Tree，也叫二叉搜索树，或称二叉排序树Binary Sort Tree），具有下列性质的二叉树：</p><p>　　1）若任意节点左子树上所有的数据，均小于本身；</p><p>　　2）若任意节点右子树上所有的数据，均大于本身；</p><p>　　二叉查找树性质：对二叉查找树进行中序遍历，即可得到有序的数列。</p><p>​        不同形态的二叉查找树如下图所示：</p><p><img src="/Algorithm/20180226113852869.png" alt="20180226113852869"></p><p>　　基于二叉查找树进行优化，进而可以得到其他的树表查找算法，如平衡树、红黑树等高效算法。</p><p>具体细节大家可以参见B站阿玮讲解课程：从入门到起飞。在集合章节详细讲解了树数据结构。全程采取动画形式讲解，让大家一目了然。</p><p>在此不多做阐述。</p><p>​不管是二叉查找树，还是平衡二叉树，还是红黑树，查找的性能都比较高</p><h1 id="十大排序算法："><a href="#十大排序算法：" class="headerlink" title="十大排序算法："></a>十大排序算法：</h1><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。</p><p>它重复的遍历过要排序的数列，一次比较相邻的两个元素，如果他们的顺序错误就把他们交换过来。</p><p>这个算法的名字由来是因为越大的元素会经由交换慢慢”浮”到最后面。</p><p>当然，大家可以按照从大到小的方式进行排列。</p><h3 id="1-1-算法步骤"><a href="#1-1-算法步骤" class="headerlink" title="1.1 算法步骤"></a>1.1 算法步骤</h3><ol><li>相邻的元素两两比较，大的放右边，小的放左边</li><li>第一轮比较完毕之后，最大值就已经确定，第二轮可以少循环一次，后面以此类推</li><li>如果数组中有n个数据，总共我们只要执行n-1轮的代码就可以</li></ol><h3 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h3><h3 id="1-3-代码示例"><a href="#1-3-代码示例" class="headerlink" title="1.3 代码示例"></a>1.3 代码示例<img src="/Algorithm/%E5%86%92%E6%B3%A1.gif" alt="冒泡"></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01_BubbleDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            冒泡排序：</span></span><br><span class="line"><span class="comment">            核心思想：</span></span><br><span class="line"><span class="comment">            1，相邻的元素两两比较，大的放右边，小的放左边。</span></span><br><span class="line"><span class="comment">            2，第一轮比较完毕之后，最大值就已经确定，第二轮可以少循环一次，后面以此类推。</span></span><br><span class="line"><span class="comment">            3，如果数组中有n个数据，总共我们只要执行n-1轮的代码就可以。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用冒泡排序将数组中的数据变成 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//外循环：表示我要执行多少轮。 如果有n个数据，那么执行n - 1 轮</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环：每一轮中我如何比较数据并找到当前的最大值</span></span><br><span class="line">            <span class="comment">//-1：为了防止索引越界</span></span><br><span class="line">            <span class="comment">//-i：提高效率，每一轮执行的次数应该比上一轮少一次。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//i 依次表示数组中的每一个索引：0 1 2 3 4</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><h3 id="2-1-算法步骤"><a href="#2-1-算法步骤" class="headerlink" title="2.1 算法步骤"></a>2.1 算法步骤</h3><ol><li>从0索引开始，跟后面的元素一一比较</li><li>小的放前面，大的放后面</li><li>第一次循环结束后，最小的数据已经确定</li><li>第二次循环从1索引开始以此类推</li><li>第三轮循环从2索引开始以此类推</li><li>第四轮循环从3索引开始以此类推。</li></ol><h3 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h3><p><img src="/Algorithm/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_SelectionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            选择排序：</span></span><br><span class="line"><span class="comment">                1，从0索引开始，跟后面的元素一一比较。</span></span><br><span class="line"><span class="comment">                2，小的放前面，大的放后面。</span></span><br><span class="line"><span class="comment">                3，第一次循环结束后，最小的数据已经确定。</span></span><br><span class="line"><span class="comment">                4，第二次循环从1索引开始以此类推。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用选择排序让数组变成 1 2 3 4 5</span></span><br><span class="line">       <span class="comment">/* //第一轮：</span></span><br><span class="line"><span class="comment">        //从0索引开始，跟后面的元素一一比较。</span></span><br><span class="line"><span class="comment">        for (int i = 0 + 1; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            //拿着0索引跟后面的数据进行比较</span></span><br><span class="line"><span class="comment">            if(arr[0] &gt; arr[i])&#123;</span></span><br><span class="line"><span class="comment">                int temp = arr[0];</span></span><br><span class="line"><span class="comment">                arr[0] = arr[i];</span></span><br><span class="line"><span class="comment">                arr[i] = temp;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终代码：</span></span><br><span class="line">        <span class="comment">//外循环：几轮</span></span><br><span class="line">        <span class="comment">//i:表示这一轮中，我拿着哪个索引上的数据跟后面的数据进行比较并交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length -<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环：每一轮我要干什么事情？</span></span><br><span class="line">            <span class="comment">//拿着i跟i后面的数据进行比较交换</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过创建有序序列和无序序列，然后再遍历无序序列得到里面每一个数字，把每一个数字插入到有序序列中正确的位置。</p><p>插入排序在插入的时候，有优化算法，在遍历有序序列找正确位置时，可以采取二分查找</p><h3 id="3-1-算法步骤"><a href="#3-1-算法步骤" class="headerlink" title="3.1 算法步骤"></a>3.1 算法步骤</h3><p>将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。</p><p>遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</p><p>N的范围：0~最大索引</p><h3 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h3><p><img src="/Algorithm/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mysort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_InsertDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            插入排序：</span></span><br><span class="line"><span class="comment">                将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。</span></span><br><span class="line"><span class="comment">                遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</span></span><br><span class="line"><span class="comment">                N的范围：0~最大索引</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.找到无序的哪一组数组是从哪个索引开始的。  2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line">                startIndex = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历从startIndex开始到最后一个元素，依次得到无序的哪一组数据中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//问题：如何把遍历到的数据，插入到前面有序的这一组当中</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录当前要插入数据的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">//交换位置</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4. 快速排序"></a>4. 快速排序</h2><p>快速排序是由东尼·霍尔所发展的一种排序算法。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。</p><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！</p><p>它是处理大数据最快的排序算法之一了。</p><p>快速排序的基础为递归算法</p><h3 id="4-1-递归算法"><a href="#4-1-递归算法" class="headerlink" title="4.1 递归算法"></a>4.1 递归算法</h3><p>递归算法的作用</p><p>递归算法是一种将复杂问题分解为更小、更相似的问题的策略。通过这种方式，可以用少量的程序代码来描述出解题过程中所需的多次重复计算。</p><p>编写递归的两个核心要素</p><ol><li><strong>找出口</strong>：确定什么时候不再调用方法。这是递归的终止条件，防止无限递归。</li><li><strong>找规则</strong>：确定如何将大问题变成规模较小的问题。这是递归的核心，通过不断缩小问题规模，最终达到可以解决的最小问题。</li></ol><h3 id="4-2-算法步骤"><a href="#4-2-算法步骤" class="headerlink" title="4.2 算法步骤"></a>4.2 算法步骤</h3><ol><li>从数列中挑出一个元素，一般都是左边第一个数字，称为 “基准数”;</li><li>创建两个指针，一个从前往后走，一个从后往前走。</li><li>先执行后面的指针，找出第一个比基准数小的数字</li><li>再执行前面的指针，找出第一个比基准数大的数字</li><li>交换两个指针指向的数字</li><li>直到两个指针相遇</li><li>将基准数跟指针指向位置的数字交换位置，称之为：基准数归位。</li><li>第一轮结束之后，基准数左边的数字都是比基准数小的，基准数右边的数字都是比基准数大的。</li><li>把基准数左边看做一个序列，把基准数右边看做一个序列，按照刚刚的规则递归排序</li></ol><h3 id="4-3-动图演示"><a href="#4-3-动图演示" class="headerlink" title="4.3 动图演示"></a>4.3 动图演示</h3><p><img src="/Algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mysort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A05_QuickSortDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Integer.MAX_VALUE);</span><br><span class="line">        System.out.println(Integer.MIN_VALUE);</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        快速排序：</span></span><br><span class="line"><span class="comment">            第一轮：以0索引的数字为基准数，确定基准数在数组中正确的位置。</span></span><br><span class="line"><span class="comment">            比基准数小的全部在左边，比基准数大的全部在右边。</span></span><br><span class="line"><span class="comment">            后面以此类推。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int[] arr = new int[1000000];</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* Random r = new Random();</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            arr[i] = r.nextInt();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(end - start);<span class="comment">//149</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//课堂练习：</span></span><br><span class="line">        <span class="comment">//我们可以利用相同的办法去测试一下，选择排序，冒泡排序以及插入排序运行的效率</span></span><br><span class="line">        <span class="comment">//得到一个结论：快速排序真的非常快。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* for (int i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            System.out.print(arr[i] + &quot; &quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *   参数一：我们要排序的数组</span></span><br><span class="line"><span class="comment">     *   参数二：要排序数组的起始索引</span></span><br><span class="line"><span class="comment">     *   参数三：要排序数组的结束索引</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">//定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">            <span class="comment">//递归的出口</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录基准数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">baseNumber</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="comment">//利用循环找到要交换的数字</span></span><br><span class="line">        <span class="keyword">while</span>(start != end)&#123;</span><br><span class="line">            <span class="comment">//利用end，从后往前开始找，找比基准数小的数字</span></span><br><span class="line">            <span class="comment">//int[] arr = &#123;1, 6, 2, 7, 9, 3, 4, 5, 10, 8&#125;;</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[end] &lt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(end);</span><br><span class="line">            <span class="comment">//利用start，从前往后找，找比基准数大的数字</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[start] &gt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//把end和start指向的元素进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当start和end指向了同一个元素的时候，那么上面的循环就会结束</span></span><br><span class="line">        <span class="comment">//表示已经找到了基准数在数组中应存入的位置</span></span><br><span class="line">        <span class="comment">//基准数归位</span></span><br><span class="line">        <span class="comment">//就是拿着这个范围中的第一个数字，跟start指向的元素进行交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[start];</span><br><span class="line">        arr[start] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//确定6左边的范围，重复刚刚所做的事情</span></span><br><span class="line">        quickSort(arr,i,start - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//确定6右边的范围，重复刚刚所做的事情</span></span><br><span class="line">        quickSort(arr,start + <span class="number">1</span>,j);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：一定先移动end再移动start指针！！</p><p>其他排序方式待更新~</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>冒泡排序： 相邻的元素两两比较，小的放前面，大的放后面</li><li>选择排序： 从0索引开始，拿着每一个索引上的元素跟后面的元素依次比较 小的放前面，大的放后面，以此类推</li><li>插入排序： 将数组分为有序和无序两组，遍历无序数据，将元素插入有序序列中即可。</li><li>快速排序<ul><li>将排序范围中的第一个数字作为基准数，再定义两个变量start，end</li><li>start从前往后找比基准数大的，end从后往前找比基准数小的。</li><li>找到之后交换start和end指向的元素，并循环这一过程，直到start和end处于同一个位置，该位置是基准数在数组中应存入的位置，再让基准数归位。</li><li>归位后的效果：基准数左边的，比基准数小，基准数右边的，比基准数大</li></ul></li></ol><h2 id="常见的JAVASE—Arrays"><a href="#常见的JAVASE—Arrays" class="headerlink" title="常见的JAVASE—Arrays"></a>常见的JAVASE—Arrays</h2><p><img src="/Algorithm/image-20250326235932790.png" alt="image-20250326235932790"></p><p>sort底层为快速排序  </p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p><img src="/Algorithm/image-20250327133453257.png" alt="image-20250327133453257"></p><p>函数式编程思想是忽略面向对象的复杂语法，强调做什么，而不是谁去做。</p><p>总结</p><p>1、Lambda表达式的基本作用？ 简化函数式接口的匿名内部类的写法。</p><p>2、Lambda表达式有什么使用前提？ 必须是接口的匿名内部类，接口中只能有一个抽象方法</p><p>3、Lambda的好处？ Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码，它可以写出更简洁、更灵活的代码，作为一种更紧凑的代码风格，使Java语言表达能力得到了提升。</p><p><img src="/Algorithm/image-20250328130305221.png" alt="image-20250328130305221"></p><p>算法练习：</p><p><img src="/Algorithm/image-20250329151948775.png" alt="image-20250329151948775"></p><p>特点:从第三个数据开始，是前两个数据和（斐波那契数列）</p><p>&#x2F;&#x2F;1.创建一个长度为12的数组</p><p>&#x2F;&#x2F;2.手动给0索引和1索引的数据进行赋值</p><p>&#x2F;&#x2F;3.利用循环给剩余的数据进行赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//  特点:从第三个数据开始，是前两个数据和（斐波那契数列）</span></span><br><span class="line">   <span class="comment">/*  //求解1:</span></span><br><span class="line"><span class="comment">   //1.创建一个长度为12的数组</span></span><br><span class="line"><span class="comment">   int[] arr = new int[12];</span></span><br><span class="line"><span class="comment">   //2.手动给0索引和1索引的数据进行赋值</span></span><br><span class="line"><span class="comment">   arr[0] = 1;</span></span><br><span class="line"><span class="comment">   arr[1]= 1;</span></span><br><span class="line"><span class="comment">   //3.利用循环给剩余的数据进行赋值</span></span><br><span class="line"><span class="comment">        for (int i =2;i&lt;arr.length;i++)&#123;</span></span><br><span class="line"><span class="comment">            arr[i] = arr[i-1] +arr[i-2];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">   //4.获取最大索引上的数据即可</span></span><br><span class="line"><span class="comment">        System.out.println(arr[11]);*/</span></span><br><span class="line">     <span class="comment">//求解2：</span></span><br><span class="line">        <span class="comment">//1.递归出口</span></span><br><span class="line">        <span class="comment">//2.递归规律</span></span><br><span class="line">        <span class="comment">//Fn（12）=Fn（11）+Fn(10);</span></span><br><span class="line">        <span class="comment">//Fn(11) =Fn(10)+Fn(9);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(getsum(<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getsum</span><span class="params">(<span class="type">int</span> month)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (month == <span class="number">1</span>|| month==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getsum(month - <span class="number">1</span>)+getsum(month - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Algorithm/image-20250329154552142.png" alt="image-20250329154552142"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(getCount(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(<span class="type">int</span> day)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (day&lt;=<span class="number">0</span> ||day &gt;=<span class="number">11</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前时间错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (day==<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (getCount(day+<span class="number">1</span>)+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JAVASE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/03/24/API/"/>
      <url>/2025/03/24/API/</url>
      
        <content type="html"><![CDATA[<p>title: API<br>date: 2025-3-24 20:23:44<br>tags:</p><ul><li>Hexo<br>categories: Hexo</li></ul><h1 id="常见API"><a href="#常见API" class="headerlink" title="常见API"></a>常见API</h1><h2 id="1-Math"><a href="#1-Math" class="headerlink" title="1.Math"></a>1.Math</h2><p>注意：方法都是静态的。</p><p><img src="/API.assets/image-20250218224144107.png" alt="image-20250218224144107"></p><p>​      sqrt  返回a的平方根</p><p>​      cbrt 返回a的立方根</p><p>练习一：判断一个数是否为一个质数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Math1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(isPrime(<span class="number">997</span>));</span><br><span class="line">        <span class="comment">//判断一个数是否为质数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; Math.sqrt(number); i++) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习二</p><p><img src="/API.assets/image-20250218232919677.png" alt="image-20250218232919677"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Math2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//要求1:统计水仙花数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//三位数100-999</span></span><br><span class="line">        <span class="comment">//845</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">3</span>)+Math.pow(shi,<span class="number">3</span>)+Math.pow(bai,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line"><span class="comment">//                System.out.println(i);</span></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求2：证明没有两位的自幂数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>; i &lt;= <span class="number">99</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">2</span>)+Math.pow(shi,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line"><span class="comment">//                System.out.println(i);</span></span><br><span class="line">                count1++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求3：四叶玫瑰数和五角星数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1000</span>; i &lt;= <span class="number">9999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> i/<span class="number">1000</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">4</span>)+Math.pow(shi,<span class="number">4</span>)+Math.pow(bai,<span class="number">4</span>)+Math.pow(qian,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                count2++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count2);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count3</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求3：四叶玫瑰数和五角星数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10000</span>; i &lt;= <span class="number">99999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> i/<span class="number">1000</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">wan</span> <span class="operator">=</span> i/<span class="number">10000</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">5</span>)+Math.pow(shi,<span class="number">5</span>)+Math.pow(bai,<span class="number">5</span>)+Math.pow(qian,<span class="number">5</span>)+Math.pow(wan,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                count3++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-System"><a href="#2-System" class="headerlink" title="2.System"></a>2.System</h2><p>工具类</p><p>时间原点：1970.1.1.0点</p><p>1s &#x3D;1000ms</p><p><img src="/API.assets/image-20250219205626612.png" alt="image-20250219205626612"></p><p>System.arraycopy（arr1，0，arr2，4，3）</p><p><strong>参数一：数据源，要拷贝的数据从哪个数组而来<br>参数二：从数据源数组中的第几个索引开始拷贝<br>参数三：目的地，我要把数据拷贝到哪个数组中<br>参数四：目的地数组的索引。<br>参数五：拷贝的个数</strong></p><p>注意：</p><p>1.数据源数组和目的地数组都是基本数据类型，那么两者的类型必须保持一致，否则会报错。</p><p>2.在拷贝的时候需要考虑数组的长度，超出范围也会报错。</p><p>3.如果数据源数组和目的地数组都是引用数据类型，那么子类类型可以赋值给父类类型。</p><h2 id="3-Runtime"><a href="#3-Runtime" class="headerlink" title="3.Runtime"></a>3.Runtime</h2><p><img src="/API.assets/image-20250219224656571.png" alt="image-20250219224656571"></p><h2 id="4-Object"><a href="#4-Object" class="headerlink" title="4.Object"></a>4.Object</h2><p><img src="/API.assets/image-20250301142716334.png" alt="image-20250301142716334"></p><p>注意equals方法：</p><p><img src="/API.assets/image-20250301150624191.png" alt="image-20250301150624191"></p><h3 id="4-1-对象克隆"><a href="#4-1-对象克隆" class="headerlink" title="4.1 对象克隆"></a>4.1 对象克隆</h3><p><img src="/API.assets/image-20250301151016470.png" alt="image-20250301151016470"></p><p><img src="/API.assets/image-20250301201049895.png" alt="image-20250301201049895"></p><p><img src="/API.assets/image-20250301201424732.png" alt="image-20250301201424732"></p><p><img src="/API.assets/image-20250301201542555.png" alt="image-20250301201542555"></p><p><strong>总结</strong></p><ol><li>Object是java中的顶级父类。 所有的类都直接或间接的继承于Object类。</li><li>toString()：一般会重写，打印对象时打印属性</li><li>equals()：比较对象时会重写，比较对象属性值是否相同</li><li>clone()：默认浅克隆。</li></ol><p>如果需要深克隆需要重写方法或者使用第三方工具类。</p><h3 id="4-2-Objects"><a href="#4-2-Objects" class="headerlink" title="4.2 Objects"></a>4.2 Objects</h3><p><img src="/API.assets/image-20250301224628567.png" alt="image-20250301224628567"></p><p>总结</p><ol><li>Objects是一个对象工具类，提供了一些操作对象的方法</li><li>equals(对象1，对象2)：先做非空判断，比较两个对象</li><li>isNull(对象)：判断对象是否为空</li><li>nonNull(对象)：判断对象是否不是空</li></ol><h3 id="4-3-BigInteger"><a href="#4-3-BigInteger" class="headerlink" title="4.3 BigInteger"></a>4.3 BigInteger</h3><p>java中，整数有四种类型：byte，short，int，long。</p><p>在底层占用字节个数：byte1字节，short2，int4，long8。</p><p><img src="/API.assets/image-20250305232434592.png" alt="image-20250305232434592"></p><p><img src="/API.assets/image-20250305234345876.png" alt="image-20250305234345876"></p><p>1.一般数据比较小，用valueof获取。</p><p>2.如果超出long的取值范围，或者不确定用多大数字，用普通构造方法。</p><p>3.对象一旦创建，BigInteger内部记录的值不能发生改变。<br>4.只要进行计算都会产生一个新的BigInteger对象</p><p><img src="/API.assets/image-20250305234709306.png" alt="image-20250305234709306"> </p><p><img src="/API.assets/image-20250306000421856.png" alt="image-20250306000421856"></p><h3 id="4-4-BigDecima-小数的精确计算"><a href="#4-4-BigDecima-小数的精确计算" class="headerlink" title="4.4 BigDecima(小数的精确计算)"></a>4.4 BigDecima(小数的精确计算)</h3><p><img src="/API.assets/image-20250315143132692.png" alt="image-20250315143132692"></p><p><img src="/API.assets/image-20250315164032257.png" alt="image-20250315164032257"></p><p>总结</p><ol><li><p>BigDecimal的作用是什么？</p><ul><li>表示较大的小数和解决小数运算精度失真问题。</li></ul></li><li><p>BigDecimal的对象如何获取？</p><ul><li>BigDecimal bd1 &#x3D; new BigDecimal(“较大的小数”);</li><li>BigDecimal bd2 &#x3D; BigDecimal.valueOf(0.1);</li></ul></li><li><p>常见操作<br>加：add<br>减：subtract<br>乘：multiply<br>除：divide（四舍五入：RoundingMode.HALF_UP）</p></li></ol><h2 id="5-正则表达式（Pattern）"><a href="#5-正则表达式（Pattern）" class="headerlink" title="5.正则表达式（Pattern）"></a>5.正则表达式（Pattern）</h2><p>作用一：校验字符串是否满足规则</p><p>作用二：在一段文本中查找满足要求的内容</p><p><img src="/API.assets/image-20250315204453826.png" alt="image-20250315204453826"></p><p><img src="/API.assets/image-20250316132204393.png" alt="image-20250316132204393"></p><p><img src="/API.assets/image-20250316132412539.png" alt="image-20250316132412539"></p><h2 id="6-爬虫"><a href="#6-爬虫" class="headerlink" title="6.爬虫"></a>6.爬虫</h2><p>爬对象的基础固定方式如下：</p><p><img src="/API.assets/image-20250316162909096.png" alt="image-20250316162909096"></p><p>Java当中默认的是贪婪爬取，但是在+或者*后面加上问号，此时就是非贪婪爬取。</p><p><img src="/API.assets/image-20250316173424750.png" alt="image-20250316173424750"></p><p><img src="/API.assets/image-20250316210019404.png" alt="image-20250316210019404"></p><p><img src="/API.assets/image-20250316231316320.png" alt="image-20250316231316320"></p><p>这张图片是一个关于正则表达式中分组的总结。具体内容如下：</p><ol><li><p><strong>正则表达式中的分组有两种：</strong></p><ul><li>捕获分组</li><li>非捕获分组</li></ul></li><li><p><strong>捕获分组（默认）：</strong></p><ul><li>可以获取每组中的内容并反复使用。</li></ul></li><li><p><strong>组号的特点：</strong></p><ul><li>从1开始，连续不间断。</li><li>以左括号为基准，最左边的是第一组。</li></ul></li><li><p><strong>非捕获分组：</strong></p><ul><li>分组之后不需要再用本组数据，仅仅把数据括起来，不占组号。</li><li>（？：）获取所有，（？&#x3D;）获取的时候，只要前面部分，（？！）排除掉后面的</li></ul></li></ol><p>这些信息对于理解和使用正则表达式中的分组功能非常有帮助。</p><h2 id="7-包装类"><a href="#7-包装类" class="headerlink" title="7.包装类"></a>7.包装类</h2><p><img src="/API.assets/image-20250317235803155.png" alt="image-20250317235803155"></p><p><img src="/API.assets/image-20250318000708629.png" alt="image-20250318000708629"></p><h2 id="8-练习"><a href="#8-练习" class="headerlink" title="8.练习"></a>8.练习</h2><p><img src="/API.assets/image-20250318235026307.png" alt="image-20250318235026307"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">program2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//字符串中只能是数字不能有其他字符</span></span><br><span class="line">        <span class="comment">//最少一位，最多十位</span></span><br><span class="line">        <span class="comment">//0不能开头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义一个字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123a&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.校验字符串</span></span><br><span class="line">        <span class="keyword">if</span>(!str.matches(<span class="string">&quot;[1-9]\\d&#123;0,9&#125;&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;格式错误&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;格式正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span>str.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            num = num*<span class="number">10</span>+a;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println(num+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/API.assets/581d2947d29b2317d44c8d17d985b629_720.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Regexdemo3</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">/*定义一个方法实现toBinaryString方法效果，即将十进制数转成二进制数 */</span></span><br><span class="line">            System.out.println(toBinaryString(<span class="number">123</span>));</span><br><span class="line">            System.out.println(Integer.toBinaryString(<span class="number">123</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toBinaryString</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不断除以2 ，得到余数，一直到商为0就结束</span></span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//利用循环不断的除以2获取余数</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (number==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//要先获取余数再除以2</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">remaindar</span> <span class="operator">=</span>number % <span class="number">2</span>;</span><br><span class="line">                <span class="comment">//倒着拼接</span></span><br><span class="line">                sb.insert(<span class="number">0</span>,remaindar);</span><br><span class="line">                <span class="comment">//除以2</span></span><br><span class="line">                number =number/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/API.assets/image-20250319234858222.png" alt="image-20250319234858222"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">regexdemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//JDK7</span></span><br><span class="line">        <span class="comment">/*1.计算出生年月日的毫秒值*/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="string">&quot;2000年1月1日&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yy年y月y日&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span>sdf.parse(birthday);</span><br><span class="line">        <span class="type">long</span> <span class="variable">birthtime</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">        <span class="type">long</span> <span class="variable">todaytime</span> <span class="operator">=</span>System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> todaytime - birthtime;</span><br><span class="line">        System.out.println(time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDK8</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span>LocalDate.now();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">days</span> <span class="operator">=</span> ChronoUnit.DAYS.between(ld1,ld2);</span><br><span class="line"></span><br><span class="line">        System.out.println(days);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
