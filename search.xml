<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2025/05/08/JavaWeb/"/>
      <url>/2025/05/08/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb从0到1"><a href="#JavaWeb从0到1" class="headerlink" title="JavaWeb从0到1"></a>JavaWeb从0到1</h1><h2 id="1-Html"><a href="#1-Html" class="headerlink" title="1.Html"></a>1.Html</h2><h3 id="标题部分"><a href="#标题部分" class="headerlink" title="标题部分"></a>标题部分</h3><ol><li>标题标签<ul><li>标签：<code>&lt;h1&gt;...&lt;/h1&gt;</code>（h1 → h6 重要程度依次降低）</li><li>注意：HTML标签都是预定义好的，不能自己随意定义。</li></ul></li><li>水平线标签 <code>&lt;hr&gt;</code></li><li>图片标签 <code>&lt;img src=&quot;...&quot; width=&quot;...&quot; height=&quot;...&quot;&gt;</code><ul><li>绝对路径：绝对磁盘路径（D:&#x2F;xxxx）、绝对网络路径（<a href="https://xxxx/">https://xxxx）</a>&#x2F;)</li><li>相对路径：从当前文件开始查找。（.&#x2F;：当前目录，..&#x2F;：上级目录）</li></ul></li></ol><p><img src="/imgs/JavaWeb/image-20250508233754138.png" alt="image-20250508233754138"></p><p>优先级：id选择器&gt;类选择器&gt;元素选择器</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><ol><li>超链接<ul><li>标签：<code>&lt;a&gt;</code></li><li>属性：<ul><li><code>href:</code> 指定资源访问的url</li><li><code>target:</code> 指定在何处打开资源链接<ul><li><code>_self:</code> 默认值，在当前页面打开</li><li><code>_blank:</code> 在空白页面打开</li></ul></li></ul></li></ul></li><li>CSS属性<ul><li><code>text-decoration:</code> 规定添加到文本的修饰，none表示定义标准的文本。</li><li><code>color:</code> 定义文本的颜色</li></ul></li></ol><h3 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h3><p><img src="/imgs/JavaWeb/image-20250508235859169.png" alt="image-20250508235859169"></p><p><img src="/imgs/JavaWeb/image-20250509000747843.png" alt="image-20250509000747843"></p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p><img src="/imgs/JavaWeb/image-20250509124908647.png" alt="image-20250509124908647"></p><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p><img src="/imgs/JavaWeb/image-20250509140201300.png" alt="image-20250509140201300"></p><p><strong>注意：表单项必须有name属性才能提交</strong></p><p><img src="/imgs/JavaWeb/image-20250509141937434.png" alt="image-20250509141937434"></p><h2 id="2-JavaScript"><a href="#2-JavaScript" class="headerlink" title="2.JavaScript"></a>2.JavaScript</h2><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><p><img src="/imgs/JavaWeb/image-20250509142545802.png" alt="image-20250509142545802"></p><p><img src="/imgs/JavaWeb/image-20250509143948571.png" alt="image-20250509143948571"></p><p><img src="/imgs/JavaWeb/image-20250509144123627.png" alt="image-20250509144123627"></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><img src="/imgs/JavaWeb/image-20250509145658059.png" alt="image-20250509145658059"></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="/imgs/JavaWeb/image-20250509145837209.png" alt="image-20250509145837209"></p><p><img src="/imgs/JavaWeb/image-20250509152718364.png" alt="image-20250509152718364"></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><img src="/imgs/JavaWeb/image-20250509153350522.png" alt="image-20250509153350522"></p><p><img src="/imgs/JavaWeb/image-20250509153611038.png" alt="image-20250509153611038"></p><h3 id="Array数组"><a href="#Array数组" class="headerlink" title="Array数组"></a>Array数组</h3><p><img src="/imgs/JavaWeb/image-20250509213319025.png" alt=" "></p><p><img src="/imgs/JavaWeb/image-20250509213911170.png" alt="image-20250509213911170"></p><p><img src="/imgs/JavaWeb/image-20250509214506650.png" alt="image-20250509214506650"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><img src="/imgs/JavaWeb/image-20250509214718785.png" alt="image-20250509214718785"></p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p><img src="/imgs/JavaWeb/image-20250510002850052.png" alt="image-20250510002850052"></p><p><img src="/imgs/JavaWeb/image-20250510003516403.png" alt="image-20250510003516403"></p><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a><strong>BOM</strong></h3><ul><li>概念：Browser Object Model 浏览器对象模型，允许JavaScript与浏览器对话，JavaScript将浏览器的各个组成部分封装为对象。</li><li>组成：<ul><li>Window：浏览器窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul></li></ul><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><p><img src="/imgs/JavaWeb/image-20250510004855107.png" alt="image-20250510004855107"></p><p><img src="/imgs/JavaWeb/image-20250510121754546.png" alt="image-20250510121754546"></p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p><img src="/imgs/JavaWeb/image-20250510121718026.png" alt="image-20250510121718026"></p><p><img src="/imgs/JavaWeb/image-20250510122409663.png" alt="image-20250510122409663"></p><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>方式一：通过 HTML 标签中的事件属性进行绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;我被点击了！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：通过 DOM 元素属性绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;按钮2&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;我被点击了！&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/imgs/JavaWeb/image-20250510131808381.png" alt="image-20250510131808381"></p><h2 id="3-Vue"><a href="#3-Vue" class="headerlink" title="3.Vue"></a>3.Vue</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/2025/04/29/Mysql/"/>
      <url>/2025/04/29/Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h3><ul><li><h4 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a><strong>1. 基本定义</strong></h4></li><li><ul><li><strong>类型</strong>：关系型数据库（RDBMS）</li><li><strong>组成</strong>：由多张相互关联的<strong>二维表</strong>构成，表之间通过字段建立联系。</li></ul></li><li><h4 id="2-核心特点"><a href="#2-核心特点" class="headerlink" title="2. 核心特点"></a><strong>2. 核心特点</strong></h4></li><li><table><thead><tr><th align="left">特点</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>表结构存储</strong></td><td align="left">数据以行和列的形式存储，格式统一，易于维护。</td></tr><tr><td align="left"><strong>SQL语言操作</strong></td><td align="left">使用标准化SQL（结构化查询语言）进行数据操作，语法通用。</td></tr></tbody></table></li><li><h4 id="3-数据表示例"><a href="#3-数据表示例" class="headerlink" title="3. 数据表示例"></a><strong>3. 数据表示例</strong></h4></li><li><h5 id="员工表-employees"><a href="#员工表-employees" class="headerlink" title="员工表 (employees)"></a><strong>员工表 (employees)</strong></h5></li><li><table><thead><tr><th align="left">id</th><th align="left">name</th><th align="left">job</th><th align="left">dept_id</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">金庸</td><td align="left">总裁</td><td align="left">2</td></tr><tr><td align="left">2</td><td align="left">张无忌</td><td align="left">项目经理</td><td align="left">1</td></tr><tr><td align="left">3</td><td align="left">杨逍</td><td align="left">开发</td><td align="left">3</td></tr></tbody></table></li><li><h5 id="部门表-departments"><a href="#部门表-departments" class="headerlink" title="部门表 (departments)"></a><strong>部门表 (departments)</strong></h5></li><li><table><thead><tr><th align="left">id</th><th align="left">name</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">研发部</td></tr><tr><td align="left">2</td><td align="left">总经办</td></tr><tr><td align="left">3</td><td align="left">财务部</td></tr></tbody></table></li><li><h4 id="4-表间关系"><a href="#4-表间关系" class="headerlink" title="4. 表间关系"></a><strong>4. 表间关系</strong></h4></li><li><ul><li><strong>外键关联</strong>：<code>employees.dept_id</code> 字段关联 <code>departments.id</code>，实现数据关联查询。</li></ul></li></ul><p><img src="/imgs/MySQL/image-20250429202712838.png" alt="image-20250429202712838"></p><h2 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h2><ol><li>SQL语句可以单行或多行书写，以分号结尾。</li><li>SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</li><li>&#x2F;imgs&#x2F;MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</li><li>注释：<ul><li>单行注释：– 注释内容 或 # 注释内容(&#x2F;imgs&#x2F;MySQL特有)</li><li>多行注释：&#x2F;* 注释内容 *&#x2F;</li></ul></li></ol><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><p><img src="/imgs/MySQL/image-20250429203118646.png" alt="image-20250429203118646"></p><h3 id="1-DDL"><a href="#1-DDL" class="headerlink" title="1.DDL"></a>1.DDL</h3><p><img src="/imgs/MySQL/image-20250505222119272.png" alt="image-20250505222119272"></p><h4 id="表操作-查询"><a href="#表操作-查询" class="headerlink" title="表操作-查询"></a>表操作-查询</h4><p><img src="/imgs/MySQL/image-20250505224322941.png" alt="image-20250505224322941"></p><p><img src="/imgs/MySQL/image-20250505230045343.png" alt="image-20250505230045343"></p><h4 id="表操作-数据类型"><a href="#表操作-数据类型" class="headerlink" title="表操作-数据类型"></a>表操作-数据类型</h4><p>&#x2F;imgs&#x2F;MySQL数据类型有很多，主要分为三类:数值类型、字符串类型、日期时间类型。</p><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><p><img src="/imgs/MySQL/image-20250505233841051.png" alt="image-20250505233841051"></p><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><p><img src="/imgs/MySQL/image-20250505233811905.png" alt="image-20250505233811905"></p><h5 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h5><p><img src="/imgs/MySQL/image-20250505233742649.png" alt="image-20250505233742649"></p><h4 id="表操作-修改"><a href="#表操作-修改" class="headerlink" title="表操作-修改"></a>表操作-修改</h4><p><strong>添加字段</strong>：提供了一个SQL语句模板，用于向数据库表中添加新的字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];**</span><br></pre></td></tr></table></figure><p>案例：给出了一个具体的SQL语句示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp <span class="keyword">ADD</span> nickname <span class="type">varchar</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;昵称&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>这个示例中，<code>emp</code> 是表名。</li><li><code>nickname</code> 是要添加的新字段名。</li><li><code>varchar(20)</code> 指定了字段的数据类型为可变长度字符串，最大长度为20个字符。</li><li><code>COMMENT &#39;昵称&#39;</code> 为字段添加了注释“昵称”，说明这个字段是用来存储员工昵称的。****</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">修改数据类型</span><br><span class="line">ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</span><br><span class="line"></span><br><span class="line">修改字段名和字段类型</span><br><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line">将emp表的nickname字段修改为username，类型为varchar(30)</span><br><span class="line">ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#x27;昵称&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">删除字段</span><br><span class="line">ALTER TABLE 表名 DROP 字段名;</span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line">将emp表的字段username删除</span><br><span class="line"></span><br><span class="line">ALTER TABLE emp DROP username;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修改表名</span><br><span class="line">ALTER TABLE 表名 RENAME TO 新表名;</span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line">将emp表的表名修改为 employee</span><br><span class="line"></span><br><span class="line">ALTER TABLE emp RENAME TO employee;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">删除表</span><br><span class="line">DROP TABLE [ IF EXISTS ] 表名;</span><br><span class="line"></span><br><span class="line">删除指定表，并重新创建该表</span><br><span class="line">TRUNCATE TABLE 表名;</span><br></pre></td></tr></table></figure><h3 id="2-DML-增删改"><a href="#2-DML-增删改" class="headerlink" title="2.DML(增删改)"></a>2.DML(增删改)</h3><h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><p><img src="/imgs/MySQL/image-20250506212218340.png" alt="image-20250506212218340"></p><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p><img src="/imgs/MySQL/image-20250506235228677.png" alt="image-20250506235228677"></p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p><img src="/imgs/MySQL/image-20250506235253234.png" alt="image-20250506235253234"></p><h3 id="3-DQL-查询"><a href="#3-DQL-查询" class="headerlink" title="3.DQL(查询)"></a>3.DQL(查询)</h3><p><img src="/imgs/MySQL/image-20250507215132985.png" alt="image-20250507215132985"></p><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询<img src="/imgs/MySQL/image-20250507215154856.png" alt="image-20250507215154856"></h4><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p><img src="/imgs/MySQL/image-20250507215221576.png" alt="image-20250507215221576"></p><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p><img src="/imgs/MySQL/image-20250507215251205.png" alt="image-20250507215251205"></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p><img src="/imgs/MySQL/image-20250507215359519.png" alt="image-20250507215359519"></p><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p><img src="/imgs/MySQL/image-20250507215417967.png" alt="image-20250507215417967"></p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p><img src="/imgs/MySQL/image-20250507215443439.png" alt="image-20250507215443439"></p><h3 id="SQL-查询的编写顺序与执行顺序对比"><a href="#SQL-查询的编写顺序与执行顺序对比" class="headerlink" title="SQL 查询的编写顺序与执行顺序对比"></a>SQL 查询的编写顺序与执行顺序对比</h3><h4 id="1-编写顺序（程序员书写-SQL-的顺序）"><a href="#1-编写顺序（程序员书写-SQL-的顺序）" class="headerlink" title="1. 编写顺序（程序员书写 SQL 的顺序）"></a>1. 编写顺序（程序员书写 SQL 的顺序）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表       -- 4. 选择要查询的列</span><br><span class="line">FROM 表名列表         -- 1. 确定数据来源</span><br><span class="line">WHERE 条件列表        -- 2. 筛选行数据</span><br><span class="line">GROUP BY 分组字段列表  -- 3. 分组聚合</span><br><span class="line">HAVING 分组后条件列表  -- 5. 筛选分组结果</span><br><span class="line">ORDER BY 排序字段列表  -- 6. 排序结果</span><br><span class="line">LIMIT 分页参数        -- 7. 分页限制</span><br></pre></td></tr></table></figure><h4 id="2-执行顺序（数据库实际执行的顺序）"><a href="#2-执行顺序（数据库实际执行的顺序）" class="headerlink" title="2. 执行顺序（数据库实际执行的顺序）"></a>2. 执行顺序（数据库实际执行的顺序）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM 表名列表         -- 1. 加载表数据</span><br><span class="line">WHERE 条件列表        -- 2. 逐行筛选符合条件的记录</span><br><span class="line">GROUP BY 分组字段列表  -- 3. 对筛选后的数据分组</span><br><span class="line">HAVING 分组后条件列表  -- 4. 筛选分组后的结果集</span><br><span class="line">SELECT 字段列表       -- 5. 选择最终显示的列</span><br><span class="line">ORDER BY 排序字段列表  -- 6. 对结果排序</span><br><span class="line">LIMIT 分页参数        -- 7. 返回指定范围的数据</span><br></pre></td></tr></table></figure><p>总结：</p><p><img src="/imgs/MySQL/image-20250507224553234.png" alt="image-20250507224553234"></p><h3 id="4-DCL"><a href="#4-DCL" class="headerlink" title="4.DCL"></a>4.DCL</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(下)</title>
      <link href="/2025/03/24/JavaSE%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2025/03/24/JavaSE%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="常见API"><a href="#常见API" class="headerlink" title="常见API"></a>常见API</h1><h2 id="1-Math"><a href="#1-Math" class="headerlink" title="1.Math"></a>1.Math</h2><p>注意：方法都是静态的。</p><p><img src="/imgs/JavaSE/image-20250218224144107.png" alt="image-20250218224144107"></p><p>​      sqrt  返回a的平方根</p><p>​      cbrt 返回a的立方根</p><p>练习一：判断一个数是否为一个质数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Math1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(isPrime(<span class="number">997</span>));</span><br><span class="line">        <span class="comment">//判断一个数是否为质数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; Math.sqrt(number); i++) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习二</p><p><img src="/imgs/JavaSE/image-20250218232919677.png" alt="image-20250218232919677"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Math2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//要求1:统计水仙花数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//三位数100-999</span></span><br><span class="line">        <span class="comment">//845</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">3</span>)+Math.pow(shi,<span class="number">3</span>)+Math.pow(bai,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line"><span class="comment">//                System.out.println(i);</span></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求2：证明没有两位的自幂数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>; i &lt;= <span class="number">99</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">2</span>)+Math.pow(shi,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line"><span class="comment">//                System.out.println(i);</span></span><br><span class="line">                count1++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求3：四叶玫瑰数和五角星数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1000</span>; i &lt;= <span class="number">9999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> i/<span class="number">1000</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">4</span>)+Math.pow(shi,<span class="number">4</span>)+Math.pow(bai,<span class="number">4</span>)+Math.pow(qian,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                count2++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count2);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count3</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求3：四叶玫瑰数和五角星数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10000</span>; i &lt;= <span class="number">99999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span>i/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span>i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> i/<span class="number">1000</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">wan</span> <span class="operator">=</span> i/<span class="number">10000</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span>Math.pow(ge,<span class="number">5</span>)+Math.pow(shi,<span class="number">5</span>)+Math.pow(bai,<span class="number">5</span>)+Math.pow(qian,<span class="number">5</span>)+Math.pow(wan,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == i)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                count3++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-System"><a href="#2-System" class="headerlink" title="2.System"></a>2.System</h2><p>工具类</p><p>时间原点：1970.1.1.0点</p><p>1s &#x3D;1000ms</p><p><img src="/imgs/JavaSE/image-20250219205626612.png" alt="image-20250219205626612"></p><p>System.arraycopy（arr1，0，arr2，4，3）</p><p><strong>参数一：数据源，要拷贝的数据从哪个数组而来<br>参数二：从数据源数组中的第几个索引开始拷贝<br>参数三：目的地，我要把数据拷贝到哪个数组中<br>参数四：目的地数组的索引。<br>参数五：拷贝的个数</strong></p><p>注意：</p><p>1.数据源数组和目的地数组都是基本数据类型，那么两者的类型必须保持一致，否则会报错。</p><p>2.在拷贝的时候需要考虑数组的长度，超出范围也会报错。</p><p>3.如果数据源数组和目的地数组都是引用数据类型，那么子类类型可以赋值给父类类型。</p><h2 id="3-Runtime"><a href="#3-Runtime" class="headerlink" title="3.Runtime"></a>3.Runtime</h2><p><img src="/imgs/JavaSE/image-20250219224656571.png" alt="image-20250219224656571"></p><h2 id="4-Object"><a href="#4-Object" class="headerlink" title="4.Object"></a>4.Object</h2><p><img src="/imgs/JavaSE/image-20250301142716334.png" alt="image-20250301142716334"></p><p>注意equals方法：</p><p><img src="/imgs/JavaSE/image-20250301150624191.png" alt="image-20250301150624191"></p><h3 id="4-1-对象克隆"><a href="#4-1-对象克隆" class="headerlink" title="4.1 对象克隆"></a>4.1 对象克隆</h3><p><img src="/imgs/JavaSE/image-20250301151016470.png" alt="image-20250301151016470"></p><p><img src="/imgs/JavaSE/image-20250301201049895.png" alt="image-20250301201049895"></p><p><img src="/imgs/JavaSE/image-20250301201424732.png" alt="image-20250301201424732"></p><p><img src="/imgs/JavaSE/image-20250301201542555.png" alt="image-20250301201542555"></p><p><strong>总结</strong></p><ol><li>Object是java中的顶级父类。 所有的类都直接或间接的继承于Object类。</li><li>toString()：一般会重写，打印对象时打印属性</li><li>equals()：比较对象时会重写，比较对象属性值是否相同</li><li>clone()：默认浅克隆。</li></ol><p>如果需要深克隆需要重写方法或者使用第三方工具类。</p><h3 id="4-2-Objects"><a href="#4-2-Objects" class="headerlink" title="4.2 Objects"></a>4.2 Objects</h3><p><img src="/imgs/JavaSE/image-20250301224628567.png" alt="image-20250301224628567"></p><p>总结</p><ol><li>Objects是一个对象工具类，提供了一些操作对象的方法</li><li>equals(对象1，对象2)：先做非空判断，比较两个对象</li><li>isNull(对象)：判断对象是否为空</li><li>nonNull(对象)：判断对象是否不是空</li></ol><h3 id="4-3-BigInteger"><a href="#4-3-BigInteger" class="headerlink" title="4.3 BigInteger"></a>4.3 BigInteger</h3><p>java中，整数有四种类型：byte，short，int，long。</p><p>在底层占用字节个数：byte1字节，short2，int4，long8。</p><p><img src="/imgs/JavaSE/image-20250305232434592.png" alt="image-20250305232434592"></p><p><img src="/imgs/JavaSE/image-20250305234345876.png" alt="image-20250305234345876"></p><p>1.一般数据比较小，用valueof获取。</p><p>2.如果超出long的取值范围，或者不确定用多大数字，用普通构造方法。</p><p>3.对象一旦创建，BigInteger内部记录的值不能发生改变。<br>4.只要进行计算都会产生一个新的BigInteger对象</p><p><img src="/imgs/JavaSE/image-20250305234709306.png" alt="image-20250305234709306"> </p><p><img src="/imgs/JavaSE/image-20250306000421856.png" alt="image-20250306000421856"></p><h3 id="4-4-BigDecima-小数的精确计算"><a href="#4-4-BigDecima-小数的精确计算" class="headerlink" title="4.4 BigDecima(小数的精确计算)"></a>4.4 BigDecima(小数的精确计算)</h3><p><img src="/imgs/JavaSE/image-20250315143132692.png" alt="image-20250315143132692"></p><p><img src="/imgs/JavaSE/image-20250315164032257.png" alt="image-20250315164032257"></p><p>总结</p><ol><li><p>BigDecimal的作用是什么？</p><ul><li>表示较大的小数和解决小数运算精度失真问题。</li></ul></li><li><p>BigDecimal的对象如何获取？</p><ul><li>BigDecimal bd1 &#x3D; new BigDecimal(“较大的小数”);</li><li>BigDecimal bd2 &#x3D; BigDecimal.valueOf(0.1);</li></ul></li><li><p>常见操作<br>加：add<br>减：subtract<br>乘：multiply<br>除：divide（四舍五入：RoundingMode.HALF_UP）</p></li></ol><h2 id="5-正则表达式（Pattern）"><a href="#5-正则表达式（Pattern）" class="headerlink" title="5.正则表达式（Pattern）"></a>5.正则表达式（Pattern）</h2><p>作用一：校验字符串是否满足规则</p><p>作用二：在一段文本中查找满足要求的内容</p><p><img src="/imgs/JavaSE/image-20250315204453826.png" alt="image-20250315204453826"></p><p><img src="/imgs/JavaSE/image-20250316132204393.png" alt="image-20250316132204393"></p><p><img src="/imgs/JavaSE/image-20250316132412539.png" alt="image-20250316132412539"></p><h2 id="6-爬虫"><a href="#6-爬虫" class="headerlink" title="6.爬虫"></a>6.爬虫</h2><p>爬对象的基础固定方式如下：</p><p><img src="/imgs/JavaSE/image-20250316162909096.png" alt="image-20250316162909096"></p><p>Java当中默认的是贪婪爬取，但是在+或者*后面加上问号，此时就是非贪婪爬取。</p><p><img src="/imgs/JavaSE/image-20250316173424750.png" alt="image-20250316173424750"></p><p><img src="/imgs/JavaSE/image-20250316210019404.png" alt="image-20250316210019404"></p><p><img src="/imgs/JavaSE/image-20250316231316320.png" alt="image-20250316231316320"></p><p>这张图片是一个关于正则表达式中分组的总结。具体内容如下：</p><ol><li><p><strong>正则表达式中的分组有两种：</strong></p><ul><li>捕获分组</li><li>非捕获分组</li></ul></li><li><p><strong>捕获分组（默认）：</strong></p><ul><li>可以获取每组中的内容并反复使用。</li></ul></li><li><p><strong>组号的特点：</strong></p><ul><li>从1开始，连续不间断。</li><li>以左括号为基准，最左边的是第一组。</li></ul></li><li><p><strong>非捕获分组：</strong></p><ul><li>分组之后不需要再用本组数据，仅仅把数据括起来，不占组号。</li><li>（？：）获取所有，（？&#x3D;）获取的时候，只要前面部分，（？！）排除掉后面的</li></ul></li></ol><p>这些信息对于理解和使用正则表达式中的分组功能非常有帮助。</p><h2 id="7-包装类"><a href="#7-包装类" class="headerlink" title="7.包装类"></a>7.包装类</h2><p><img src="/imgs/JavaSE/image-20250317235803155.png" alt="image-20250317235803155"></p><p><img src="/imgs/JavaSE/image-20250318000708629.png" alt="image-20250318000708629"></p><h2 id="8-练习"><a href="#8-练习" class="headerlink" title="8.练习"></a>8.练习</h2><p><img src="/imgs/JavaSE/image-20250318235026307.png" alt="image-20250318235026307"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">program2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//字符串中只能是数字不能有其他字符</span></span><br><span class="line">        <span class="comment">//最少一位，最多十位</span></span><br><span class="line">        <span class="comment">//0不能开头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义一个字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123a&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.校验字符串</span></span><br><span class="line">        <span class="keyword">if</span>(!str.matches(<span class="string">&quot;[1-9]\\d&#123;0,9&#125;&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;格式错误&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;格式正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span>str.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            num = num*<span class="number">10</span>+a;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println(num+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/JavaSE/581d2947d29b2317d44c8d17d985b629_720.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Regexdemo3</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">/*定义一个方法实现toBinaryString方法效果，即将十进制数转成二进制数 */</span></span><br><span class="line">            System.out.println(toBinaryString(<span class="number">123</span>));</span><br><span class="line">            System.out.println(Integer.toBinaryString(<span class="number">123</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toBinaryString</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不断除以2 ，得到余数，一直到商为0就结束</span></span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//利用循环不断的除以2获取余数</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (number==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//要先获取余数再除以2</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">remaindar</span> <span class="operator">=</span>number % <span class="number">2</span>;</span><br><span class="line">                <span class="comment">//倒着拼接</span></span><br><span class="line">                sb.insert(<span class="number">0</span>,remaindar);</span><br><span class="line">                <span class="comment">//除以2</span></span><br><span class="line">                number =number/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/JavaSE/image-20250319234858222.png" alt="image-20250319234858222"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">regexdemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//JDK7</span></span><br><span class="line">        <span class="comment">/*1.计算出生年月日的毫秒值*/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="string">&quot;2000年1月1日&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yy年y月y日&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span>sdf.parse(birthday);</span><br><span class="line">        <span class="type">long</span> <span class="variable">birthtime</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">        <span class="type">long</span> <span class="variable">todaytime</span> <span class="operator">=</span>System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> todaytime - birthtime;</span><br><span class="line">        System.out.println(time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDK8</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span>LocalDate.now();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">days</span> <span class="operator">=</span> ChronoUnit.DAYS.between(ld1,ld2);</span><br><span class="line"></span><br><span class="line">        System.out.println(days);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常见的七种查找算法："><a href="#常见的七种查找算法：" class="headerlink" title="常见的七种查找算法："></a>常见的七种查找算法：</h1><p>​数据结构是数据存储的方式，算法是数据计算的方式。所以在开发中，算法和数据结构息息相关。今天的讲义中会涉及部分数据结构的专业名词，如果各位铁粉有疑惑，可以先看一下哥们后面录制的数据结构，再回头看算法。</p><h2 id="1-基本查找"><a href="#1-基本查找" class="headerlink" title="1. 基本查找"></a>1. 基本查找</h2><p>​也叫做顺序查找</p><p>​        说明：顺序查找适合于存储结构为数组或者链表。</p><p><strong>基本思想</strong>：顺序查找也称为线形查找，属于无序查找算法。从数据结构线的一端开始，顺序扫描，依次将遍历到的结点与要查找的值相比较，若相等则表示查找成功；若遍历结束仍没有找到相同的，表示查找失败。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//顺序查找</span></span><br><span class="line">        <span class="comment">//从0所以挨个往后开始查找</span></span><br><span class="line">        <span class="comment">//需求：定义一个方法利用基本查找，查询某个元素是否存在</span></span><br><span class="line">        <span class="type">int</span>[] arr =&#123;<span class="number">131</span>,<span class="number">127</span>,<span class="number">147</span>,<span class="number">81</span>,<span class="number">103</span>,<span class="number">24</span>,<span class="number">3</span>,<span class="number">79</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr1 =&#123;<span class="number">131</span>,<span class="number">127</span>,<span class="number">147</span>,<span class="number">81</span>,<span class="number">103</span>,<span class="number">24</span>,<span class="number">3</span>,<span class="number">79</span>,<span class="number">81</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span><span class="number">81</span>;</span><br><span class="line">        System.out.println(bassicSearch(arr,number));</span><br><span class="line">        System.out.println(basicindex(arr,number));</span><br><span class="line">        System.out.println(basicindex1(arr1,number));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">bassicSearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺序查找，不考虑重复元素，返回索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">basicindex</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//考虑重复元素，返回索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title function_">basicindex1</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == number)&#123;</span><br><span class="line">                list.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h2><p>​也叫做折半查找</p><p>说明：元素必须是有序的，从小到大，或者从大到小都是可以的。</p><p>如果是无序的，也可以先进行排序。但是排序之后，会改变原有数据的顺序，查找出来元素位置跟原来的元素可能是不一样的，所以排序之后再查找只能判断当前数据是否在容器当中，返回的索引无实际的意义。</p><p>　　<strong>基本思想</strong>：也称为是折半查找，属于有序查找算法。用给定值先与中间结点比较。比较完之后有三种情况：</p><ul><li><p>相等</p><p>说明找到了</p></li><li><p>要查找的数据比中间节点小</p><p>说明要查找的数字在中间节点左边</p></li><li><p>要查找的数据比中间节点大</p><p>说明要查找的数字在中间节点右边</p></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_BinarySearchDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//二分查找/折半查找</span></span><br><span class="line">        <span class="comment">//核心：</span></span><br><span class="line">        <span class="comment">//每次排除一半的查找范围</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求：定义一个方法利用二分查找，查询某个元素在数组中的索引</span></span><br><span class="line">        <span class="comment">//数据如下：&#123;7, 23, 79, 81, 103, 127, 131, 147&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">7</span>, <span class="number">23</span>, <span class="number">79</span>, <span class="number">81</span>, <span class="number">103</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">147</span>&#125;;</span><br><span class="line">        System.out.println(binarySearch(arr, <span class="number">150</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用循环不断的去找要查找的数据</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min &gt; max)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.找到min和max的中间位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (min + max) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//4.拿着mid指向的元素跟要查找的元素进行比较</span></span><br><span class="line">            <span class="keyword">if</span>(arr[mid] &gt; number)&#123;</span><br><span class="line">                <span class="comment">//4.1 number在mid的左边</span></span><br><span class="line">                <span class="comment">//min不变，max = mid - 1；</span></span><br><span class="line">                max = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &lt; number)&#123;</span><br><span class="line">                <span class="comment">//4.2 number在mid的右边</span></span><br><span class="line">                <span class="comment">//max不变，min = mid + 1;</span></span><br><span class="line">                min = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//4.3 number跟mid指向的元素一样</span></span><br><span class="line">                <span class="comment">//找到了</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-插值查找"><a href="#3-插值查找" class="headerlink" title="3. 插值查找"></a>3. 插值查找</h2><p>在介绍插值查找之前，先考虑一个问题：</p><p>​为什么二分查找算法一定要是折半，而不是折四分之一或者折更多呢？</p><p>其实就是因为方便，简单，但是如果我能在二分查找的基础上，让中间的mid点，尽可能靠近想要查找的元素，那不就能提高查找的效率了吗？</p><p>二分查找中查找点计算如下：</p><p>　　mid&#x3D;(low+high)&#x2F;2, 即mid&#x3D;low+1&#x2F;2*(high-low);</p><p>我们可以将查找的点改进为如下：</p><p>　　mid&#x3D;low+(key-a[low])&#x2F;(a[high]-a[low])*(high-low)，</p><p>这样，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。</p><p>　　基本思想：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。</p><p>**细节：**对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。</p><p>代码跟二分查找类似，只要修改一下mid的计算方式即可。</p><h2 id="4-斐波那契查找"><a href="#4-斐波那契查找" class="headerlink" title="4. 斐波那契查找"></a>4. 斐波那契查找</h2><p>在介绍斐波那契查找算法之前，我们先介绍一下很它紧密相连并且大家都熟知的一个概念——黄金分割。</p><p>　　黄金比例又称黄金分割，是指事物各部分间一定的数学比例关系，即将整体一分为二，较大部分与较小部分之比等于整体与较大部分之比，其比值约为1:0.618或1.618:1。</p><p>　　0.618被公认为最具有审美意义的比例数字，这个数值的作用不仅仅体现在诸如绘画、雕塑、音乐、建筑等艺术领域，而且在管理、工程设计等方面也有着不可忽视的作用。因此被称为黄金分割。</p><p>　　在数学中有一个非常有名的数学规律：斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89…….</p><p>（从第三个数开始，后边每一个数都是前两个数的和）。</p><p>然后我们会发现，随着斐波那契数列的递增，前后两个数的比值会越来越接近0.618，利用这个特性，我们就可以将黄金比例运用到查找技术中。</p><p><img src="//imgs/JavaSE/20150323100632467" alt="img"> </p><p>基本思想：也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。</p><p>斐波那契查找也是在二分查找的基础上进行了优化，优化中间点mid的计算方式即可</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeiBoSearchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">89</span>, <span class="number">1000</span>, <span class="number">1234</span>&#125;;</span><br><span class="line">        System.out.println(search(arr, <span class="number">1234</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] getFeiBo() &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class="line">            arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//表示斐波那契数分割数的下标值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//调用斐波那契数列</span></span><br><span class="line">        <span class="type">int</span>[] f = getFeiBo();</span><br><span class="line">        <span class="comment">//获取斐波那契分割数值的下标</span></span><br><span class="line">        <span class="keyword">while</span> (high &gt; (f[index] - <span class="number">1</span>)) &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为f[k]值可能大于a的长度，因此需要使用Arrays工具类，构造一个新法数组，并指向temp[],不足的部分会使用0补齐</span></span><br><span class="line">        <span class="type">int</span>[] temp = Arrays.copyOf(arr, f[index]);</span><br><span class="line">        <span class="comment">//实际需要使用arr数组的最后一个数来填充不足的部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> high + <span class="number">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            temp[i] = arr[high];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用while循环处理，找到key值</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = low + f[index - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; temp[mid]) &#123;<span class="comment">//向数组的前面部分进行查找</span></span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  对k--进行理解</span></span><br><span class="line"><span class="comment">                  1.全部元素=前面的元素+后面的元素</span></span><br><span class="line"><span class="comment">                  2.f[k]=k[k-1]+f[k-2]</span></span><br><span class="line"><span class="comment">                  因为前面有k-1个元素没所以可以继续分为f[k-1]=f[k-2]+f[k-3]</span></span><br><span class="line"><span class="comment">                  即在f[k-1]的前面继续查找k--</span></span><br><span class="line"><span class="comment">                  即下次循环,mid=f[k-1-1]-1</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                index--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; temp[mid]) &#123;<span class="comment">//向数组的后面的部分进行查找</span></span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">                index -= <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//找到了</span></span><br><span class="line">                <span class="comment">//需要确定返回的是哪个下标</span></span><br><span class="line">                <span class="keyword">if</span> (mid &lt;= high) &#123;</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> high;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-分块查找"><a href="#5-分块查找" class="headerlink" title="5. 分块查找"></a>5. 分块查找</h2><p>当数据表中的数据元素很多时，可以采用分块查找。</p><p>汲取了顺序查找和折半查找各自的优点，既有动态结构，又适于快速查找</p><p>分块查找适用于数据较多，但是数据不会发生变化的情况，如果需要一边添加一边查找，建议使用哈希查找</p><p>分块查找的过程：</p><ol><li>需要把数据分成N多小块，块与块之间不能有数据重复的交集。</li><li>给每一块创建对象单独存储到数组当中</li><li>查找数据的时候，先在数组查，当前数据属于哪一块</li><li>再到这一块中顺序查找</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_BlockSearchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            分块查找</span></span><br><span class="line"><span class="comment">            核心思想：</span></span><br><span class="line"><span class="comment">                块内无序，块间有序</span></span><br><span class="line"><span class="comment">            实现步骤：</span></span><br><span class="line"><span class="comment">                1.创建数组blockArr存放每一个块对象的信息</span></span><br><span class="line"><span class="comment">                2.先查找blockArr确定要查找的数据属于哪一块</span></span><br><span class="line"><span class="comment">                3.再单独遍历这一块数据即可</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">16</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>,<span class="number">21</span>, <span class="number">18</span>,</span><br><span class="line">                     <span class="number">32</span>, <span class="number">23</span>, <span class="number">37</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">34</span>,</span><br><span class="line">                     <span class="number">50</span>, <span class="number">48</span>, <span class="number">61</span>, <span class="number">52</span>, <span class="number">73</span>, <span class="number">66</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建三个块的对象</span></span><br><span class="line">        <span class="type">Block</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">21</span>,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">45</span>,<span class="number">6</span>,<span class="number">11</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">73</span>,<span class="number">12</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义数组用来管理三个块的对象（索引表）</span></span><br><span class="line">        Block[] blockArr = &#123;b1,b2,b3&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个变量用来记录要查找的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，传递索引表，数组，要查找的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(blockArr,arr,number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印一下</span></span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用分块查找的原理，查询number的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Block[] blockArr, <span class="type">int</span>[] arr, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">//1.确定number是在那一块当中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexBlock</span> <span class="operator">=</span> findIndexBlock(blockArr, number);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(indexBlock == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//表示number不在数组当中</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取这一块的起始索引和结束索引   --- 30</span></span><br><span class="line">        <span class="comment">// Block b1 = new Block(21,0,5);   ----  0</span></span><br><span class="line">        <span class="comment">// Block b2 = new Block(45,6,11);  ----  1</span></span><br><span class="line">        <span class="comment">// Block b3 = new Block(73,12,17); ----  2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> blockArr[indexBlock].getStartIndex();</span><br><span class="line">        <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> blockArr[indexBlock].getEndIndex();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= endIndex; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用来确定number在哪一块当中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findIndexBlock</span><span class="params">(Block[] blockArr,<span class="type">int</span> number)</span>&#123; <span class="comment">//100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从0索引开始遍历blockArr，如果number小于max，那么就表示number是在这一块当中的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; blockArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(number &lt;= blockArr[i].getMax())&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> max;<span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startIndex;<span class="comment">//起始索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> endIndex;<span class="comment">//结束索引</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">(<span class="type">int</span> max, <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStartIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartIndex</span><span class="params">(<span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEndIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndIndex</span><span class="params">(<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Block&#123;max = &quot;</span> + max + <span class="string">&quot;, startIndex = &quot;</span> + startIndex + <span class="string">&quot;, endIndex = &quot;</span> + endIndex + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-哈希查找"><a href="#6-哈希查找" class="headerlink" title="6. 哈希查找"></a>6. 哈希查找</h2><p>哈希查找是分块查找的进阶版，适用于数据一边添加一边查找的情况。</p><p>一般是数组 + 链表的结合体或者是数组+链表 + 红黑树的结合体</p><p>在课程中，为了让大家方便理解，所以规定：</p><ul><li>数组的0索引处存储1~100</li><li>数组的1索引处存储101~200</li><li>数组的2索引处存储201~300</li><li>以此类推</li></ul><p>但是实际上，我们一般不会采取这种方式，因为这种方式容易导致一块区域添加的元素过多，导致效率偏低。</p><p>更多的是先计算出当前数据的哈希值，用哈希值跟数组的长度进行计算，计算出应存入的位置，再挂在数组的后面形成链表，如果挂的元素太多而且数组长度过长，我们也会把链表转化为红黑树，进一步提高效率。</p><p>具体的过程，大家可以参见B站阿玮讲解课程：从入门到起飞。在集合章节详细讲解了哈希表的数据结构。全程采取动画形式讲解，让大家一目了然。</p><p>在此不多做阐述。</p><p><img src="//imgs/JavaSE/Snipaste_2022-09-05_21-36-50.png" alt="Snipaste_2022-09-05_21-36-50"></p><h2 id="7-树表查找"><a href="#7-树表查找" class="headerlink" title="7. 树表查找"></a>7. 树表查找</h2><p>本知识点涉及到数据结构：树。</p><p>建议先看一下后面阿玮讲解的数据结构，再回头理解。</p><p>基本思想：二叉查找树是先对待查找的数据进行生成树，确保树的左分支的值小于右分支的值，然后在就行和每个节点的父节点比较大小，查找最适合的范围。 这个算法的查找效率很高，但是如果使用这种查找方法要首先创建树。 </p><p>　　二叉查找树（BinarySearch Tree，也叫二叉搜索树，或称二叉排序树Binary Sort Tree），具有下列性质的二叉树：</p><p>　　1）若任意节点左子树上所有的数据，均小于本身；</p><p>　　2）若任意节点右子树上所有的数据，均大于本身；</p><p>　　二叉查找树性质：对二叉查找树进行中序遍历，即可得到有序的数列。</p><p>​        不同形态的二叉查找树如下图所示：</p><p><img src="//imgs/JavaSE/20180226113852869.png" alt="20180226113852869"></p><p>　　基于二叉查找树进行优化，进而可以得到其他的树表查找算法，如平衡树、红黑树等高效算法。</p><p>具体细节大家可以参见B站阿玮讲解课程：从入门到起飞。在集合章节详细讲解了树数据结构。全程采取动画形式讲解，让大家一目了然。</p><p>在此不多做阐述。</p><p>​不管是二叉查找树，还是平衡二叉树，还是红黑树，查找的性能都比较高</p><h1 id="十大排序算法："><a href="#十大排序算法：" class="headerlink" title="十大排序算法："></a>十大排序算法：</h1><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。</p><p>它重复的遍历过要排序的数列，一次比较相邻的两个元素，如果他们的顺序错误就把他们交换过来。</p><p>这个算法的名字由来是因为越大的元素会经由交换慢慢”浮”到最后面。</p><p>当然，大家可以按照从大到小的方式进行排列。</p><h3 id="1-1-算法步骤"><a href="#1-1-算法步骤" class="headerlink" title="1.1 算法步骤"></a>1.1 算法步骤</h3><ol><li>相邻的元素两两比较，大的放右边，小的放左边</li><li>第一轮比较完毕之后，最大值就已经确定，第二轮可以少循环一次，后面以此类推</li><li>如果数组中有n个数据，总共我们只要执行n-1轮的代码就可以</li></ol><h3 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h3><h3 id="1-3-代码示例"><a href="#1-3-代码示例" class="headerlink" title="1.3 代码示例"></a>1.3 代码示例<img src="//imgs/JavaSE/%E5%86%92%E6%B3%A1.gif" alt="冒泡"></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01_BubbleDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            冒泡排序：</span></span><br><span class="line"><span class="comment">            核心思想：</span></span><br><span class="line"><span class="comment">            1，相邻的元素两两比较，大的放右边，小的放左边。</span></span><br><span class="line"><span class="comment">            2，第一轮比较完毕之后，最大值就已经确定，第二轮可以少循环一次，后面以此类推。</span></span><br><span class="line"><span class="comment">            3，如果数组中有n个数据，总共我们只要执行n-1轮的代码就可以。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用冒泡排序将数组中的数据变成 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//外循环：表示我要执行多少轮。 如果有n个数据，那么执行n - 1 轮</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环：每一轮中我如何比较数据并找到当前的最大值</span></span><br><span class="line">            <span class="comment">//-1：为了防止索引越界</span></span><br><span class="line">            <span class="comment">//-i：提高效率，每一轮执行的次数应该比上一轮少一次。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//i 依次表示数组中的每一个索引：0 1 2 3 4</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><h3 id="2-1-算法步骤"><a href="#2-1-算法步骤" class="headerlink" title="2.1 算法步骤"></a>2.1 算法步骤</h3><ol><li>从0索引开始，跟后面的元素一一比较</li><li>小的放前面，大的放后面</li><li>第一次循环结束后，最小的数据已经确定</li><li>第二次循环从1索引开始以此类推</li><li>第三轮循环从2索引开始以此类推</li><li>第四轮循环从3索引开始以此类推。</li></ol><h3 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h3><p><img src="//imgs/JavaSE/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_SelectionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            选择排序：</span></span><br><span class="line"><span class="comment">                1，从0索引开始，跟后面的元素一一比较。</span></span><br><span class="line"><span class="comment">                2，小的放前面，大的放后面。</span></span><br><span class="line"><span class="comment">                3，第一次循环结束后，最小的数据已经确定。</span></span><br><span class="line"><span class="comment">                4，第二次循环从1索引开始以此类推。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用选择排序让数组变成 1 2 3 4 5</span></span><br><span class="line">       <span class="comment">/* //第一轮：</span></span><br><span class="line"><span class="comment">        //从0索引开始，跟后面的元素一一比较。</span></span><br><span class="line"><span class="comment">        for (int i = 0 + 1; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            //拿着0索引跟后面的数据进行比较</span></span><br><span class="line"><span class="comment">            if(arr[0] &gt; arr[i])&#123;</span></span><br><span class="line"><span class="comment">                int temp = arr[0];</span></span><br><span class="line"><span class="comment">                arr[0] = arr[i];</span></span><br><span class="line"><span class="comment">                arr[i] = temp;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终代码：</span></span><br><span class="line">        <span class="comment">//外循环：几轮</span></span><br><span class="line">        <span class="comment">//i:表示这一轮中，我拿着哪个索引上的数据跟后面的数据进行比较并交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length -<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环：每一轮我要干什么事情？</span></span><br><span class="line">            <span class="comment">//拿着i跟i后面的数据进行比较交换</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过创建有序序列和无序序列，然后再遍历无序序列得到里面每一个数字，把每一个数字插入到有序序列中正确的位置。</p><p>插入排序在插入的时候，有优化算法，在遍历有序序列找正确位置时，可以采取二分查找</p><h3 id="3-1-算法步骤"><a href="#3-1-算法步骤" class="headerlink" title="3.1 算法步骤"></a>3.1 算法步骤</h3><p>将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。</p><p>遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</p><p>N的范围：0~最大索引</p><h3 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h3><p><img src="//imgs/JavaSE/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mysort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_InsertDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            插入排序：</span></span><br><span class="line"><span class="comment">                将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。</span></span><br><span class="line"><span class="comment">                遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</span></span><br><span class="line"><span class="comment">                N的范围：0~最大索引</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.找到无序的哪一组数组是从哪个索引开始的。  2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line">                startIndex = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历从startIndex开始到最后一个元素，依次得到无序的哪一组数据中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//问题：如何把遍历到的数据，插入到前面有序的这一组当中</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录当前要插入数据的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">//交换位置</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4. 快速排序"></a>4. 快速排序</h2><p>快速排序是由东尼·霍尔所发展的一种排序算法。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。</p><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！</p><p>它是处理大数据最快的排序算法之一了。</p><p>快速排序的基础为递归算法</p><h3 id="4-1-递归算法"><a href="#4-1-递归算法" class="headerlink" title="4.1 递归算法"></a>4.1 递归算法</h3><p>递归算法的作用</p><p>递归算法是一种将复杂问题分解为更小、更相似的问题的策略。通过这种方式，可以用少量的程序代码来描述出解题过程中所需的多次重复计算。</p><p>编写递归的两个核心要素</p><ol><li><strong>找出口</strong>：确定什么时候不再调用方法。这是递归的终止条件，防止无限递归。</li><li><strong>找规则</strong>：确定如何将大问题变成规模较小的问题。这是递归的核心，通过不断缩小问题规模，最终达到可以解决的最小问题。</li></ol><h3 id="4-2-算法步骤"><a href="#4-2-算法步骤" class="headerlink" title="4.2 算法步骤"></a>4.2 算法步骤</h3><ol><li>从数列中挑出一个元素，一般都是左边第一个数字，称为 “基准数”;</li><li>创建两个指针，一个从前往后走，一个从后往前走。</li><li>先执行后面的指针，找出第一个比基准数小的数字</li><li>再执行前面的指针，找出第一个比基准数大的数字</li><li>交换两个指针指向的数字</li><li>直到两个指针相遇</li><li>将基准数跟指针指向位置的数字交换位置，称之为：基准数归位。</li><li>第一轮结束之后，基准数左边的数字都是比基准数小的，基准数右边的数字都是比基准数大的。</li><li>把基准数左边看做一个序列，把基准数右边看做一个序列，按照刚刚的规则递归排序</li></ol><h3 id="4-3-动图演示"><a href="#4-3-动图演示" class="headerlink" title="4.3 动图演示"></a>4.3 动图演示</h3><p><img src="//imgs/JavaSE/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mysort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A05_QuickSortDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Integer.MAX_VALUE);</span><br><span class="line">        System.out.println(Integer.MIN_VALUE);</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        快速排序：</span></span><br><span class="line"><span class="comment">            第一轮：以0索引的数字为基准数，确定基准数在数组中正确的位置。</span></span><br><span class="line"><span class="comment">            比基准数小的全部在左边，比基准数大的全部在右边。</span></span><br><span class="line"><span class="comment">            后面以此类推。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int[] arr = new int[1000000];</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* Random r = new Random();</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            arr[i] = r.nextInt();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(end - start);<span class="comment">//149</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//课堂练习：</span></span><br><span class="line">        <span class="comment">//我们可以利用相同的办法去测试一下，选择排序，冒泡排序以及插入排序运行的效率</span></span><br><span class="line">        <span class="comment">//得到一个结论：快速排序真的非常快。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* for (int i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            System.out.print(arr[i] + &quot; &quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *   参数一：我们要排序的数组</span></span><br><span class="line"><span class="comment">     *   参数二：要排序数组的起始索引</span></span><br><span class="line"><span class="comment">     *   参数三：要排序数组的结束索引</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">//定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">            <span class="comment">//递归的出口</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录基准数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">baseNumber</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="comment">//利用循环找到要交换的数字</span></span><br><span class="line">        <span class="keyword">while</span>(start != end)&#123;</span><br><span class="line">            <span class="comment">//利用end，从后往前开始找，找比基准数小的数字</span></span><br><span class="line">            <span class="comment">//int[] arr = &#123;1, 6, 2, 7, 9, 3, 4, 5, 10, 8&#125;;</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[end] &lt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(end);</span><br><span class="line">            <span class="comment">//利用start，从前往后找，找比基准数大的数字</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[start] &gt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//把end和start指向的元素进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当start和end指向了同一个元素的时候，那么上面的循环就会结束</span></span><br><span class="line">        <span class="comment">//表示已经找到了基准数在数组中应存入的位置</span></span><br><span class="line">        <span class="comment">//基准数归位</span></span><br><span class="line">        <span class="comment">//就是拿着这个范围中的第一个数字，跟start指向的元素进行交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[start];</span><br><span class="line">        arr[start] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//确定6左边的范围，重复刚刚所做的事情</span></span><br><span class="line">        quickSort(arr,i,start - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//确定6右边的范围，重复刚刚所做的事情</span></span><br><span class="line">        quickSort(arr,start + <span class="number">1</span>,j);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：一定先移动end再移动start指针！！</p><p>其他排序方式待更新~</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>冒泡排序： 相邻的元素两两比较，小的放前面，大的放后面</li><li>选择排序： 从0索引开始，拿着每一个索引上的元素跟后面的元素依次比较 小的放前面，大的放后面，以此类推</li><li>插入排序： 将数组分为有序和无序两组，遍历无序数据，将元素插入有序序列中即可。</li><li>快速排序<ul><li>将排序范围中的第一个数字作为基准数，再定义两个变量start，end</li><li>start从前往后找比基准数大的，end从后往前找比基准数小的。</li><li>找到之后交换start和end指向的元素，并循环这一过程，直到start和end处于同一个位置，该位置是基准数在数组中应存入的位置，再让基准数归位。</li><li>归位后的效果：基准数左边的，比基准数小，基准数右边的，比基准数大</li></ul></li></ol><h2 id="常见的API—Arrays"><a href="#常见的API—Arrays" class="headerlink" title="常见的API—Arrays"></a>常见的API—Arrays</h2><p><img src="//imgs/JavaSE/image-20250326235932790.png" alt="image-20250326235932790"></p><p>sort底层为快速排序  </p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p><img src="//imgs/JavaSE/image-20250327133453257.png" alt="image-20250327133453257"></p><p>函数式编程思想是忽略面向对象的复杂语法，强调做什么，而不是谁去做。</p><p>总结</p><p>1、Lambda表达式的基本作用？ 简化函数式接口的匿名内部类的写法。</p><p>2、Lambda表达式有什么使用前提？ 必须是接口的匿名内部类，接口中只能有一个抽象方法</p><p>3、Lambda的好处？ Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码，它可以写出更简洁、更灵活的代码，作为一种更紧凑的代码风格，使Java语言表达能力得到了提升。</p><p><img src="//imgs/JavaSE/image-20250328130305221.png" alt="image-20250328130305221"></p><p>算法练习：</p><p><img src="//imgs/JavaSE/image-20250329151948775.png" alt="image-20250329151948775"></p><p>特点:从第三个数据开始，是前两个数据和（斐波那契数列）</p><p>&#x2F;&#x2F;1.创建一个长度为12的数组</p><p>&#x2F;&#x2F;2.手动给0索引和1索引的数据进行赋值</p><p>&#x2F;&#x2F;3.利用循环给剩余的数据进行赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//  特点:从第三个数据开始，是前两个数据和（斐波那契数列）</span></span><br><span class="line">   <span class="comment">/*  //求解1:</span></span><br><span class="line"><span class="comment">   //1.创建一个长度为12的数组</span></span><br><span class="line"><span class="comment">   int[] arr = new int[12];</span></span><br><span class="line"><span class="comment">   //2.手动给0索引和1索引的数据进行赋值</span></span><br><span class="line"><span class="comment">   arr[0] = 1;</span></span><br><span class="line"><span class="comment">   arr[1]= 1;</span></span><br><span class="line"><span class="comment">   //3.利用循环给剩余的数据进行赋值</span></span><br><span class="line"><span class="comment">        for (int i =2;i&lt;arr.length;i++)&#123;</span></span><br><span class="line"><span class="comment">            arr[i] = arr[i-1] +arr[i-2];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">   //4.获取最大索引上的数据即可</span></span><br><span class="line"><span class="comment">        System.out.println(arr[11]);*/</span></span><br><span class="line">     <span class="comment">//求解2：</span></span><br><span class="line">        <span class="comment">//1.递归出口</span></span><br><span class="line">        <span class="comment">//2.递归规律</span></span><br><span class="line">        <span class="comment">//Fn（12）=Fn（11）+Fn(10);</span></span><br><span class="line">        <span class="comment">//Fn(11) =Fn(10)+Fn(9);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(getsum(<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getsum</span><span class="params">(<span class="type">int</span> month)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (month == <span class="number">1</span>|| month==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getsum(month - <span class="number">1</span>)+getsum(month - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="//imgs/JavaSE/image-20250329154552142.png" alt="image-20250329154552142"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(getCount(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(<span class="type">int</span> day)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (day&lt;=<span class="number">0</span> ||day &gt;=<span class="number">11</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前时间错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (day==<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (getCount(day+<span class="number">1</span>)+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合体系结构"><a href="#集合体系结构" class="headerlink" title="集合体系结构"></a>集合体系结构</h1><p><img src="//imgs/JavaSE/image-20250329160016291.png" alt="image-20250329160016291"></p><p>Collection是单列集合的祖宗接口，功能是全部单列集合都可以继承使用。</p><p><img src="//imgs/JavaSE/image-20250330152004478.png" alt="image-20250330152004478"></p><h2 id="1-Collection"><a href="#1-Collection" class="headerlink" title="1.Collection"></a>1.Collection</h2><p><img src="//imgs/JavaSE/image-20250330151947111.png" alt="image-20250330151947111"></p><h2 id="2-Collection的遍历方式"><a href="#2-Collection的遍历方式" class="headerlink" title="2.Collection的遍历方式"></a>2.Collection的遍历方式</h2><h3 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h3><p>迭代器对象</p><p><img src="//imgs/JavaSE/image-20250330164728239.png" alt="image-20250330164728239"></p><ol><li><p>迭代器在遍历集合的时候是不依赖索引的</p></li><li><p>迭代器需要掌握三个方法：</p><p>java</p><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = list.iterator();  </span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it.next();  </span><br><span class="line">    System.out.println(str);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>迭代器的四个细节：</p><ul><li>如果当前位置没有元素，还要强行获取，会报NoSuchElementException</li><li>迭代器遍历完毕，指针不会复位</li><li>循环中只能用一次next方法</li><li>迭代器遍历时，不能用集合的方法进行增加或者删除</li></ul></li></ol><h3 id="增强for遍历"><a href="#增强for遍历" class="headerlink" title="增强for遍历"></a>增强for遍历</h3><p><img src="//imgs/JavaSE/image-20250330235143721.png" alt="image-20250330235143721"></p><p>修改增强for中的变量，是不会改变集合中原本的数据的。</p><h3 id="Lambda表达式遍历"><a href="#Lambda表达式遍历" class="headerlink" title="Lambda表达式遍历"></a>Lambda表达式遍历</h3><p><img src="//imgs/JavaSE/image-20250330235424493.png" alt="image-20250330235424493"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol><li><strong>Collection接口</strong><ul><li>是单列集合的顶层接口，List和Set系列集合都继承或实现了它。</li><li>提供的方法被List和Set共享。</li></ul></li><li><strong>常见成员方法</strong><ul><li><code>add</code>：添加元素</li><li><code>clear</code>：清空集合</li><li><code>remove</code>：删除指定元素</li><li><code>contains</code>：判断是否包含某元素</li><li><code>isEmpty</code>：判断集合是否为空</li><li><code>size</code>：获取集合元素个数</li></ul></li><li><strong>三种通用遍历方式</strong><ul><li><strong>迭代器</strong>：<ul><li>适用于遍历过程中需要删除元素的场景。</li></ul></li><li><strong>增强for循环</strong> 和 <strong>Lambda表达式</strong>：<ul><li>仅需遍历集合时推荐使用，代码更简洁。</li></ul></li></ul></li></ol><h2 id="3-List系列集合"><a href="#3-List系列集合" class="headerlink" title="3.List系列集合"></a>3.List系列集合</h2><p><img src="//imgs/JavaSE/image-20250331202822143.png" alt="image-20250331202822143"></p><h3 id="集合遍历方式"><a href="#集合遍历方式" class="headerlink" title="集合遍历方式"></a>集合遍历方式</h3><p><img src="//imgs/JavaSE/image-20250331234536256.png" alt="image-20250331234536256"></p><h2 id="4-数据结构"><a href="#4-数据结构" class="headerlink" title="4.数据结构"></a>4.数据结构</h2><h3 id="4-1-常见的数据结构"><a href="#4-1-常见的数据结构" class="headerlink" title="4.1 常见的数据结构"></a>4.1 常见的数据结构</h3><p><img src="//imgs/JavaSE/image-20250331234816646.png" alt="image-20250331234816646"></p><h4 id="栈（后进先出，先进后出）"><a href="#栈（后进先出，先进后出）" class="headerlink" title="栈（后进先出，先进后出）"></a>栈（后进先出，先进后出）</h4><p><img src="//imgs/JavaSE/image-20250331235022559.png" alt="image-20250331235022559"></p><h4 id="队列（先进先出，后进后出）"><a href="#队列（先进先出，后进后出）" class="headerlink" title="队列（先进先出，后进后出）"></a>队列（先进先出，后进后出）</h4><p><img src="//imgs/JavaSE/image-20250331235206977.png" alt="image-20250331235206977"></p><p><img src="//imgs/JavaSE/image-20250401000258561.png" alt="image-20250401000258561"></p><h4 id="数组（查询快，增删慢）"><a href="#数组（查询快，增删慢）" class="headerlink" title="数组（查询快，增删慢）"></a>数组（查询快，增删慢）</h4><p><img src="//imgs/JavaSE/image-20250401000640809.png" alt="image-20250401000640809"></p><h4 id="链表（查询慢，增删快）"><a href="#链表（查询慢，增删快）" class="headerlink" title="链表（查询慢，增删快）"></a>链表（查询慢，增删快）</h4><p><img src="//imgs/JavaSE/image-20250401000702627.png" alt="image-20250401000702627"></p><p><img src="//imgs/JavaSE/image-20250401000834180.png" alt="image-20250401000834180"></p><p><img src="//imgs/JavaSE/image-20250401001041686.png" alt="image-20250401001041686"></p><p>单向链表&#x2F;双向链表</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>各种数据结构的特点和作用是什么样的？</p><ul><li>栈：后进先出，先进后出。</li><li>队列：先进先出，后进后出。</li><li>数组：内存连续区域，查询快，增删慢。</li><li>链表：元素是游离的，查询慢，首尾操作极快。</li></ul><p><a href="https://www.bilibili.com/video/BV1Cv411372m?spm_id_from=333.788.videopod.episodes&vd_source=f560d467e93925a5d8104ca2f9a7eb17&p=139">04、集合框架（一）：List系列集合：LinkedList集合的底层原理、特有方法、栈、队列_哔哩哔哩_bilibili</a>      好评！！！</p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>二叉树</p><p><img src="//imgs/JavaSE/image-20250402132701588.png" alt="image-20250402132701588"></p><p>红黑树</p><p><img src="//imgs/JavaSE/image-20250402133150177.png" alt="image-20250402133150177"></p><h3 id="5-LinkedList集合"><a href="#5-LinkedList集合" class="headerlink" title="5.LinkedList集合"></a>5.LinkedList集合</h3><p><img src="//imgs/JavaSE/image-20250401232615895.png" alt="image-20250401232615895"></p><p><img src="//imgs/JavaSE/image-20250401235419920.png" alt="image-20250401235419920"></p><p>————————-140—————–</p><h3 id="6-Set集合"><a href="#6-Set集合" class="headerlink" title="6.Set集合"></a>6.Set集合</h3><p><img src="//imgs/JavaSE/image-20250402105046196.png" alt="image-20250402105046196"></p><p>set要用到的方法，基本就是Collection提供的。</p><h4 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h4><p><img src="//imgs/JavaSE/image-20250402105701673.png" alt="image-20250402105701673"></p><p>Hashset集合不能去重复，默认不能对内容一样的两个不同对象去重复。</p><p>如果需要去重复，必须重写hashCode()和equals()方法。</p><p>总结</p><ol><li><p>如果希望记住元素的添加顺序，需要存储重复的元素，又要频繁的根据索引查询数据？</p><ul><li>用ArrayList集合（有序、可重复、有索引），底层基于数组的。（常用）</li></ul></li><li><p>如果希望记住元素的添加顺序，且增删首尾数据的情况较多？</p><ul><li>用LinkedList集合（有序、可重复、有索引），底层基于双链表实现的。</li></ul></li><li><p>如果不在意元素顺序，也没有重复元素需要存储，只希望增删改查都快？</p><ul><li>用HashSet集合（无序、不重复、无索引），底层基于哈希表实现的。（常用）</li></ul></li><li><p>如果希望记住元素的添加顺序，也没有重复元素需要存储，且希望增删改查都快？</p><ul><li>用LinkedHashSet集合（有序、不重复、无索引），底层基于哈希表和双链表。</li></ul></li><li><p>如果要对元素进行排序，也没有重复元素需要存储？且希望增删改查都快？</p><ul><li>用TreeSet集合，基于红黑树实现。</li></ul></li></ol><h3 id="7-集合的并发修改异常"><a href="#7-集合的并发修改异常" class="headerlink" title="7.集合的并发修改异常"></a>7.集合的并发修改异常</h3><p>集合的并发修改异常</p><ul><li>使用迭代器遍历集合时，又同时在删除集合中的数据，程序就会出现并发修改异常的错误。</li><li>由于增强for循环遍历集合就是迭代器遍历集合的简化写法，因此，使用增强for循环遍历集合，又在同时删除集合中的数据时，程序也会出现并发修改异常的错误</li></ul><p>怎么保证遍历集合同时删除数据时不出bug？</p><ul><li>使用迭代器遍历集合，但用迭代器自己的删除方法删除数据即可。</li><li>如果能用for循环遍历时：可以倒着遍历并删除；或者从前往后遍历，但删除元素后做i–操作。</li></ul><hr><h3 id="8-可变参数"><a href="#8-可变参数" class="headerlink" title="8.可变参数"></a>8.可变参数</h3><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数是一种特殊形式的参数，定义在方法、构造器的形参列表里，格式是：数据类型…参数名称。</p><h3 id="可变参数的特点和好处"><a href="#可变参数的特点和好处" class="headerlink" title="可变参数的特点和好处"></a>可变参数的特点和好处</h3><ol><li><strong>特点</strong>：<ul><li>可以不传数据给它；</li><li>可以传一个或者同时传多个数据给它；</li><li>也可以传一个数组给它。</li></ul></li><li><strong>好处</strong>：<ul><li>常常用来灵活地接收数据。</li></ul></li></ol><p>使用可变参数时需要注意的几个事项：</p><ol><li><strong>可变参数在方法内部就是一个数组</strong>：<ul><li>这意味着当你在方法中定义一个可变参数时，它实际上是一个数组。你可以像处理数组一样处理这个参数，例如使用循环遍历它。</li></ul></li><li><strong>一个形参列表中可变参数只能有一个</strong>：<ul><li>在一个方法的参数列表中，只能有一个可变参数。这是因为可变参数会捕获所有剩余的参数，如果允许多个可变参数，它们之间将无法区分。</li></ul></li><li><strong>可变参数必须放在形参列表的最后面</strong>：<ul><li>可变参数必须作为方法参数列表中的最后一个参数。这是因为它需要捕获所有后续的参数，如果放在前面，将无法正确处理后续的参数。</li></ul></li></ol><h3 id="9-Collections工具类"><a href="#9-Collections工具类" class="headerlink" title="9.Collections工具类"></a>9.Collections工具类</h3><p><img src="//imgs/JavaSE/image-20250404164338710.png" alt="image-20250404164338710"></p><p><img src="//imgs/JavaSE/image-20250404165103049.png" alt="image-20250404165103049"></p><hr><h2 id="Map集合体系"><a href="#Map集合体系" class="headerlink" title="Map集合体系"></a>Map集合体系</h2><h3 id="1-Map集合"><a href="#1-Map集合" class="headerlink" title="1.Map集合"></a>1.Map集合</h3><p><img src="//imgs/JavaSE/image-20250404231624169.png" alt="image-20250404231624169"></p><p><img src="//imgs/JavaSE/image-20250405003342252.png" alt="image-20250405003342252"></p><h3 id="2-遍历方式"><a href="#2-遍历方式" class="headerlink" title="2.遍历方式"></a>2.遍历方式</h3><h4 id="2-1键找值"><a href="#2-1键找值" class="headerlink" title="2.1键找值"></a>2.1键找值</h4><p><img src="//imgs/JavaSE/image-20250406171248900.png" alt="image-20250406171248900"></p><h4 id="2-2键值对"><a href="#2-2键值对" class="headerlink" title="2.2键值对"></a>2.2键值对</h4><p><img src="//imgs/JavaSE/image-20250406173430834.png" alt="image-20250406173430834"></p><h4 id="2-3Lambda方式"><a href="#2-3Lambda方式" class="headerlink" title="2.3Lambda方式"></a>2.3Lambda方式</h4><p><img src="//imgs/JavaSE/image-20250406185002443.png" alt="image-20250406185002443"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p> Map集合的案例-统计投票人数</p><p>需求：某个班级80名学生，现在需要组织秋游活动，班长提供了四个景点依次是（A、B、C、D），每个学生只能选择一个景点，请统计出最终哪个景点想去的人数最多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Map1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mapTest3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        String[] selects=&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> random.nextInt(<span class="number">4</span>);</span><br><span class="line">            data.add(selects[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(data);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Integer&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String datum : data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.containsKey(datum))&#123;</span><br><span class="line">                result.put(datum,result.get(datum) +<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                result.put(datum,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-HashMap"><a href="#3-HashMap" class="headerlink" title="3.HashMap"></a>3.HashMap<img src="//imgs/JavaSE/image-20250406200508963.png" alt="image-20250406200508963"></h3><h3 id="集合嵌套"><a href="#集合嵌套" class="headerlink" title="集合嵌套"></a>集合嵌套</h3><p><img src="//imgs/JavaSE/image-20250406203136457.png" alt="image-20250406203136457"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Map1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/*需求</span></span><br><span class="line"><span class="comment">● 要求在程序中记住如下省份和其对应的城市信息，记录成功后，要求可以查询出湖北省的城市信息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">江苏省 = 南京市，扬州市，苏州市，无锡市，常州市</span></span><br><span class="line"><span class="comment">        湖北省 = 武汉市，孝感市，十堰市，宜昌市，鄂州市</span></span><br><span class="line"><span class="comment">        河北省 = 石家庄市，唐山市，邢台市，保定市，张家口市</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        分析</span></span><br><span class="line"><span class="comment">● 定义一个Map集合，键用表示省份名称，值表示城市名称，注意：城市会有多个。</span></span><br><span class="line"><span class="comment">        ● 根据“湖北省”这个键获取对应的值展示即可。*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mapTest4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; c1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(c1,<span class="string">&quot;南京市&quot;</span>,<span class="string">&quot;扬州市&quot;</span>,<span class="string">&quot;苏州市&quot;</span>,<span class="string">&quot;无锡市&quot;</span>,<span class="string">&quot;常州市&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;江苏省&quot;</span>,c1);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; c2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(c2,<span class="string">&quot;武汉市&quot;</span>,<span class="string">&quot;孝感市&quot;</span>,<span class="string">&quot;十堰市&quot;</span>,<span class="string">&quot;宜昌市&quot;</span>,<span class="string">&quot;鄂州市&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;湖北省&quot;</span>,c2);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; c3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(c3,<span class="string">&quot;石家庄市&quot;</span>,<span class="string">&quot;唐山市&quot;</span>,<span class="string">&quot;邢台市&quot;</span>,<span class="string">&quot;保定市&quot;</span>,<span class="string">&quot;张家口市&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;河北省&quot;</span>,c3);</span><br><span class="line">        List&lt;String&gt; c = map.get(<span class="string">&quot;湖北省&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : c) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map.forEach((p ,g) -&gt;&#123;</span><br><span class="line">            System.out.println(p +<span class="string">&quot;----&gt;&quot;</span>+g);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK8新特性：Stream流"><a href="#JDK8新特性：Stream流" class="headerlink" title="JDK8新特性：Stream流"></a>JDK8新特性：Stream流</h3><p><img src="//imgs/JavaSE/image-20250406224547924.png" alt="image-20250406224547924"></p><p><img src="//imgs/JavaSE/image-20250406224918215.png" alt="image-20250406224918215"></p><h3 id="Stream流常见的中间方法"><a href="#Stream流常见的中间方法" class="headerlink" title="Stream流常见的中间方法"></a>Stream流常见的中间方法</h3><p><img src="//imgs/JavaSE/image-20250407220042404.png" alt="image-20250407220042404"></p><h5 id="double类型不能直接做差！！"><a href="#double类型不能直接做差！！" class="headerlink" title="double类型不能直接做差！！"></a>double类型不能直接做差！！</h5><p><img src="//imgs/JavaSE/image-20250407223359252.png" alt="image-20250407223359252"></p><p><img src="/%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6/image-20250407224317183.png" alt="image-20250407224317183"></p><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p><img src="//imgs/JavaSE/image-20250409234709807.png" alt="image-20250409234709807"></p><p><img src="//imgs/JavaSE/image-20250409235302796.png" alt="image-20250409235302796"></p><h3 id="File创建、删除文件夹"><a href="#File创建、删除文件夹" class="headerlink" title="File创建、删除文件夹"></a>File创建、删除文件夹</h3><p><img src="//imgs/JavaSE/image-20250409235741587.png" alt="image-20250409235741587"></p><h3 id="File遍历文件夹"><a href="#File遍历文件夹" class="headerlink" title="File遍历文件夹"></a>File遍历文件夹</h3><p><img src="//imgs/JavaSE/image-20250409235957240.png" alt="image-20250409235957240"></p><h3 id="方法递归"><a href="#方法递归" class="headerlink" title="方法递归"></a>方法递归</h3><p>什么是方法递归？</p><ul><li>递归是一种算法，在程序设计语言中广泛应用。</li><li>从形式上说：方法调用自身的形式称为方法递归（recursion）。</li></ul><p>递归的形式</p><ul><li>直接递归：方法自己调用自己。</li><li>间接递归：方法调用其他方法，其他方法又回调方法自己。</li></ul><p>使用方法递归时需要注意的问题：</p><ul><li>递归如果没有控制好终止，会出现递归死循环，导致栈内存溢出错误。</li></ul><p><img src="//imgs/JavaSE/image-20250410233552754.png" alt="image-20250410233552754"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOtest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      searchFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/blender&quot;</span>),<span class="string">&quot;blender.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">searchFile</span><span class="params">(File dir,String fileName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (dir == <span class="literal">null</span> || !dir.exists() || dir.isFile())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (files !=<span class="literal">null</span> &amp;&amp; files.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">             <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f.isFile())&#123;</span><br><span class="line">                    <span class="keyword">if</span> (f.getName().contains(fileName))&#123;</span><br><span class="line">                        System.out.println(f.getAbsolutePath());</span><br><span class="line">                        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span>Runtime.getRuntime();</span><br><span class="line">                        runtime.exec(f.getAbsolutePath());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    searchFile(f,fileName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归–啤酒总数问题</p><p><img src="//imgs/JavaSE/image-20250410235807000.png" alt="image-20250410235807000"></p><ul><li>啤酒2元一瓶，4个盖子可以换一瓶，2个空瓶可以换一瓶，请问10元可以喝多少瓶？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">int</span> totalNumber;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> bottlenumber;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> covernumber;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">//啤酒2元一瓶，4个盖子可以换一瓶，2个空瓶可以换一瓶，请问10元可以喝多少瓶？</span></span><br><span class="line">        System.out.println(buy(<span class="number">10</span>));</span><br><span class="line">        System.out.println(bottlenumber);</span><br><span class="line">        System.out.println(covernumber);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">buy</span><span class="params">(<span class="type">int</span> money)</span>&#123;</span><br><span class="line">        <span class="comment">//先买！！</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">allnumber</span> <span class="operator">=</span> money/<span class="number">2</span>;</span><br><span class="line">        totalNumber +=allnumber;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">allbottleNumber</span> <span class="operator">=</span>allnumber+bottlenumber;</span><br><span class="line">        <span class="type">int</span> <span class="variable">allCoverNumber</span> <span class="operator">=</span>allnumber+covernumber;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">allMoney</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (allbottleNumber &gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            allMoney +=(allbottleNumber/<span class="number">2</span>)*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bottlenumber = allbottleNumber %<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (allCoverNumber &gt;=<span class="number">4</span>)&#123;</span><br><span class="line">            allMoney +=(allCoverNumber/<span class="number">4</span>)*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        covernumber = allCoverNumber %<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (allMoney &gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            buy(allMoney);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> totalNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p><img src="//imgs/JavaSE/image-20250411112229038.png" alt="image-20250411112229038"></p><p>UTF-8字符集</p><p><img src="//imgs/JavaSE/image-20250411113634211.png" alt="image-20250411113634211"></p><ul><li>ASCII字符集：只有英文、数字、符号等，占1个字节。</li><li>GBK字符集：汉字占2个字节，英文、数字占1个字节。</li><li>UTF-8字符集：汉字占3个字节，英文、数字占1个字节。</li></ul><p>注意1：字符编码时使用的字符集，和解码时使用的字符集必须一致，否则会出现乱码</p><p>注意2：英文、数字一般不会乱码，因为很多字符集都兼容了ASCII编码。</p><p>编码和解码</p><p><img src="//imgs/JavaSE/image-20250411132309480.png" alt="image-20250411132309480"></p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p><img src="//imgs/JavaSE/image-20250412004922524.png" alt="image-20250412004922524"></p><p><img src="//imgs/JavaSE/image-20250412005037090.png" alt="image-20250412005037090"></p><p>总结流的四大类：</p><p>● 字节输入流：以内存为基准，来自磁盘文件&#x2F;网络中的数据以字节的形式读入到内存中去的流</p><p>● 字节输出流：以内存为基准，把内存中的数据以字节写出到磁盘文件或者网络中去的流。</p><p>● 字符输入流：以内存为基准，来自磁盘文件&#x2F;网络中的数据以字符的形式读入到内存中去的流。</p><p>● 字符输出流：以内存为基准，把内存中的数据以字符写出到磁盘文件或者网络介质中去的流。</p><h3 id="字节输入流-每次读取一个字节"><a href="#字节输入流-每次读取一个字节" class="headerlink" title="字节输入流-每次读取一个字节"></a>字节输入流-每次读取一个字节</h3><p><img src="//imgs/JavaSE/image-20250412005914158.png" alt="image-20250412005914158"></p><p><img src="//imgs/JavaSE/image-20250412010207007.png" alt="image-20250412010207007"></p><h3 id="字节输入流-每次读取多个字节"><a href="#字节输入流-每次读取多个字节" class="headerlink" title="字节输入流-每次读取多个字节"></a>字节输入流-每次读取多个字节</h3><p><img src="//imgs/JavaSE/image-20250412135826149.png" alt="image-20250412135826149"></p><p>● 使用FileInputStream每次读取多个字节，读取性能得到了提升，但读取汉字输出还是会乱码。</p><p>1、使用字节流读取中文，如何保证输出不乱码，怎么解决？ </p><p> 定义一个与文件一样大的字节数组，一次性读取完文件的全部字节。</p><h3 id="字节输入流-一次性读取完文件的全部字节"><a href="#字节输入流-一次性读取完文件的全部字节" class="headerlink" title="字节输入流-一次性读取完文件的全部字节"></a>字节输入流-一次性读取完文件的全部字节</h3><p><img src="//imgs/JavaSE/image-20250413115349922.png" alt="image-20250413115349922"></p><p>读写文本更适合用字符流，字节流适合做文件的转移，如文件复制。</p><h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h3><p><img src="//imgs/JavaSE/image-20250413224517650.png" alt="image-20250413224517650"></p><h4 id="复制照片"><a href="#复制照片" class="headerlink" title="复制照片"></a>复制照片</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computercopy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\Idea\\Floder\\Algorithm\\my.jpg&quot;</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\Idea\\Floder\\Algorithm\\src\\IO\\test\\my.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len =is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="释放资源的两种方式"><a href="#释放资源的两种方式" class="headerlink" title="释放资源的两种方式"></a>释放资源的两种方式</h3><h4 id="1-try-catch-finally"><a href="#1-try-catch-finally" class="headerlink" title="1.try-catch-finally"></a>1.try-catch-finally</h4><p><img src="//imgs/JavaSE/image-20250413233249994.png" alt="image-20250413233249994"></p><h4 id="2-try-with-resource"><a href="#2-try-with-resource" class="headerlink" title="2.try-with-resource"></a>2.try-with-resource</h4><p><img src="//imgs/JavaSE/image-20250413235220492.png" alt="image-20250413235220492"></p><h3 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h3><p><img src="//imgs/JavaSE/image-20250414161550588.png" alt="image-20250414161550588"></p><h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3><p>把内存中的数据以字符的形式写出到文件中去。</p><p><img src="//imgs/JavaSE/image-20250414162508704.png" alt="image-20250414162508704"></p><p>字符输出流写出数据后，必须刷新流，或者关闭流，写出的数据才能生效。 </p><p><img src="//imgs/JavaSE/image-20250414201953454.png" alt="image-20250414201953454"></p><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><h3 id="字符缓冲输入流"><a href="#字符缓冲输入流" class="headerlink" title="字符缓冲输入流"></a>字符缓冲输入流</h3><p><img src="//imgs/JavaSE/image-20250414202717585.png" alt="image-20250414202717585"></p><p><img src="//imgs/JavaSE/image-20250414204836896.png" alt="image-20250414204836896"></p><h3 id="字符缓冲输出流"><a href="#字符缓冲输出流" class="headerlink" title="字符缓冲输出流"></a>字符缓冲输出流</h3><p><img src="//imgs/JavaSE/image-20250414205248209.png" alt="image-20250414205248209"></p><p>拷贝出师表：将《出师表》原文从一个文件复制到另一个新文件。</p><p>需求：恢复顺序：确保文本在新文件中的顺序正确（假设原始文件中的顺序可能有误或乱序）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">paixu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> ( <span class="comment">//2.创建缓冲字符输入流管道与源文件接通</span></span><br><span class="line"></span><br><span class="line">              <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\Idea\\Floder\\Algorithm\\src\\IO\\test\\o.txt&quot;</span>));</span><br><span class="line">              BufferedWriter bw=<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\Idea\\Floder\\Algorithm\\src\\IO\\test\\oo.txt&quot;</span>))</span><br><span class="line">              )&#123;</span><br><span class="line">            <span class="comment">//恢复顺序到新文件中</span></span><br><span class="line">            <span class="comment">//1.定义一个ArrayList集合存储每段内容</span></span><br><span class="line">            List&lt;String&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.按照行读取</span></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) !=<span class="literal">null</span>)&#123;</span><br><span class="line">                data.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.对List集合进行读取</span></span><br><span class="line">            Collections.sort(data);</span><br><span class="line">            System.out.println(data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.遍历List集合中的每段文章进行排序</span></span><br><span class="line">            <span class="keyword">for</span> (String ln : data) &#123;</span><br><span class="line">                bw.write(ln);</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><h3 id="不同编码读取出现乱码问题"><a href="#不同编码读取出现乱码问题" class="headerlink" title="不同编码读取出现乱码问题"></a>不同编码读取出现乱码问题</h3><p>如果代码编码和被读取的文本文件的编码是一致的，使用字符流读取文本文件时不会出现乱码！</p><p>如果代码编码和被读取的文本文件的编码是不一致的，使用字符流读取文本文件时就会出现乱码！</p><p>代码编码和被读取文本文件不一致怎么办？</p><h3 id="字符输入转换流"><a href="#字符输入转换流" class="headerlink" title="字符输入转换流"></a>字符输入转换流</h3><p><img src="//imgs/JavaSE/image-20250415230504100.png" alt="image-20250415230504100"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOTest3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> ( <span class="comment">//得到文件的原始字节流</span></span><br><span class="line">              <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\Idea\\Floder\\Algorithm\\cloud.txt&quot;</span>);</span><br><span class="line">              <span class="comment">//把原始的字节输入流按照指定的字符集编码转换成字符输入流</span></span><br><span class="line">              <span class="type">Reader</span> <span class="variable">isr</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is ,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">              <span class="comment">//3.把字符输入流包装成缓冲字符输入流</span></span><br><span class="line">              <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);)&#123;</span><br><span class="line"></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符输出转换流"><a href="#字符输出转换流" class="headerlink" title="字符输出转换流"></a>字符输出转换流</h3><p><img src="//imgs/JavaSE/image-20250415233950052.png" alt="image-20250415233950052"></p><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p><img src="//imgs/JavaSE/image-20250415234551840.png" alt="image-20250415234551840"></p><p><img src="//imgs/JavaSE/image-20250416000555713.png" alt="image-20250416000555713"></p><h4 id="PrintStream和PrintWriter的区别"><a href="#PrintStream和PrintWriter的区别" class="headerlink" title="PrintStream和PrintWriter的区别"></a><strong>PrintStream和PrintWriter的区别</strong></h4><ul><li>打印数据的功能上是一模一样的：都是使用方便，性能高效（核心优势）。</li><li>PrintStream继承自字节输出流OutputStream，因此支持写字节数据的方法。</li><li>PrintWriter继承自字符输出流Writer，因此支持写字符数据出去。</li></ul><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p><img src="//imgs/JavaSE/image-20250416234839043.png" alt="image-20250416234839043"></p><p><img src="//imgs/JavaSE/image-20250416235041877.png" alt="image-20250416235041877"></p><h2 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h2><p><img src="//imgs/JavaSE/image-20250416235839522.png" alt="image-20250416235839522"></p><p>对象需要实现序列化，必须实现序列化接口。</p><p>implements Serializable</p><p>反序列化</p><p><img src="//imgs/JavaSE/image-20250416235927583.png" alt="image-20250416235927583"></p><p>在变量前加transient可以不参与反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String loginName;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String passWord;</span><br></pre></td></tr></table></figure><h2 id="IO框架"><a href="#IO框架" class="headerlink" title="IO框架"></a>IO框架</h2><h4 id="1-什么是框架？"><a href="#1-什么是框架？" class="headerlink" title="1. 什么是框架？"></a><strong>1. 什么是框架？</strong></h4><ul><li>框架是<strong>解决某类问题的一套类、接口等</strong>，可以理解为一个<strong>半成品</strong>，大多由第三方研发。</li><li><strong>好处</strong>：<ul><li>基于框架开发，能获得优秀的软件架构。</li><li>显著提高开发效率。</li></ul></li><li><strong>形式</strong>：<ul><li>通常将类、接口编译成 <code>.class</code> 文件，再打包为 <code>.jar</code> 文件发布。</li><li>示例：<code>commons-io-2.11.0.jar</code>。</li></ul></li></ul><h4 id="2-什么是IO框架？"><a href="#2-什么是IO框架？" class="headerlink" title="2. 什么是IO框架？"></a><strong>2. 什么是IO框架？</strong></h4><ul><li><strong>封装了Java原生的文件和数据操作代码</strong>，对外提供更简单的API。</li><li><strong>功能</strong>：简化文件操作（如读写、复制）和数据处理（如流传输）。</li></ul><p>常见的IO框架</p><p>Commons-io</p><p><img src="//imgs/JavaSE/image-20250417110649313.png" alt="image-20250417110649313"></p><h2 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h2><p><img src="//imgs/JavaSE/image-20250417111059693.png" alt="image-20250417111059693"></p><p><img src="//imgs/JavaSE/image-20250417111217228.png" alt="image-20250417111217228"></p><h3 id="1-Properties属性文件"><a href="#1-Properties属性文件" class="headerlink" title="1.Properties属性文件"></a>1.Properties属性文件</h3><p><img src="//imgs/JavaSE/image-20250417111715257.png" alt="image-20250417111715257"></p><p><img src="//imgs/JavaSE/image-20250417112644032.png" alt="image-20250417112644032"></p><p><img src="//imgs/JavaSE/image-20250417112703846.png" alt="image-20250417112703846"></p><h2 id="日志技术"><a href="#日志技术" class="headerlink" title="日志技术"></a>日志技术</h2><p>程序运行的信息，记录到文件中，定位Bug</p><p><img src="//imgs/JavaSE/image-20250417111820555.png" alt="image-20250417111820555"></p><p>xml概述</p><p><img src="//imgs/JavaSE/83200b32f8f3140b2b5f8914b82dc5c6_720.png" alt="img"></p><p>语法规则</p><p><img src="//imgs/JavaSE/b6b120448762dea7b7de0215d49b2a21_720.png" alt="img"></p><p><img src="//imgs/JavaSE/fbdf7905ecac3e1983f64b72cc3da386_720.png" alt="img"></p><p>约束文档</p><p><img src="//imgs/JavaSE/3bea66d3223cde468ec301e37a4ac249_720.png" alt="img"></p><h3 id="日志框架-Logback"><a href="#日志框架-Logback" class="headerlink" title="日志框架-Logback"></a>日志框架-Logback</h3><p><img src="//imgs/JavaSE/image-20250418111701124.png" alt="image-20250418111701124"></p><p>使用Logback日志框架记录系统运行信息的步骤如下:</p><ol><li><p><strong>导入Logback依赖</strong></p><ul><li>必需组件：<ul><li><code>slf4j-api</code>（日志接口规范）</li><li><code>logback-core</code>（核心模块）</li><li><code>logback-classic</code>（SLF4J实现）</li></ul></li></ul></li><li><p><strong>配置文件放置</strong></p><ul><li>将<code>logback.xml</code>配置文件<strong>直接复制到<code>src</code>目录下</strong>（不可放在子目录中）。</li></ul></li><li><p><strong>记录日志</strong></p><ul><li><p>创建Logger对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(当前类名.class);</span><br></pre></td></tr></table></figure></li><li><p>调用方法记录日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOGGER.info(<span class="string">&quot;系统启动成功&quot;</span>);  <span class="comment">// 示例</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="日志级别（重点）"><a href="#日志级别（重点）" class="headerlink" title="日志级别（重点）"></a>日志级别（重点）</h3><p><img src="/IO%E6%B5%81/image-20250418220838081.png" alt="image-20250418220838081"></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="线程-1"><a href="#线程-1" class="headerlink" title="线程"></a>线程</h2><h4 id="核心定义"><a href="#核心定义" class="headerlink" title="核心定义"></a><strong>核心定义</strong></h4><ul><li>线程是程序内部的一条独立执行路径（执行流程）</li><li>单线程程序：只有一条执行流程的程序</li></ul><h4 id="关键特性"><a href="#关键特性" class="headerlink" title="关键特性"></a><strong>关键特性</strong></h4><ol><li><strong>执行特点</strong>：<ul><li>每个线程拥有独立运行路径</li><li>单线程程序代码按顺序执行</li></ul></li><li><strong>代码示例</strong>：</li></ol><p>java</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    // 单线程执行</span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        System.out.println(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>重要说明</strong>：<ul><li>程序中如果只有一条执行流程就是单线程程序</li><li>线程是程序执行的最小单位</li></ul></li></ol><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p><img src="//imgs/JavaSE/image-20250418221632046.png" alt="image-20250418221632046"></p><p>如何在程序中创建出多条线程？</p><ul><li>Java是通过java.lang.Thread类的对象来代表线程的。</li></ul><h3 id="多线程的创建方式一：继承Thread类"><a href="#多线程的创建方式一：继承Thread类" class="headerlink" title="多线程的创建方式一：继承Thread类"></a>多线程的创建方式一：继承Thread类</h3><p>① 定义一个子类MyThread继承线程类java.lang.Thread，重写run()方法</p><p>② 创建MyThread类的对象</p><p>③ 调用线程对象的start()方法启动线程（启动后还是执行run方法的）</p><p>方式一优缺点：</p><ul><li>优点：编码简单</li><li>缺点：线程类已经继承Thread，无法继承其他类，不利于功能的扩展。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><img src="//imgs/JavaSE/image-20250420141323804.png" alt="image-20250420141323804"></p><h3 id="多线程的创建方式二：实现Runnable接口"><a href="#多线程的创建方式二：实现Runnable接口" class="headerlink" title="多线程的创建方式二：实现Runnable接口"></a>多线程的创建方式二：实现Runnable接口</h3><p>① 定义一个线程任务类MyRunnable实现Runnable接口，重写run()方法</p><p>② 创建MyRunnable任务对象</p><p>③ 把MyRunnable任务对象交给Thread处理。</p><p>④ 调用线程对象的start()方法启动线程</p><p>优缺点：</p><p>优点：实现接口，可以继承其他类，实现其他接口，可扩展性强。</p><h3 id="匿名内部类的写法"><a href="#匿名内部类的写法" class="headerlink" title="匿名内部类的写法"></a>匿名内部类的写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cloud.create_thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest2_1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">5</span> ; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;子线程1输出：&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(target).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化形式</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;子线程2输出:&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda简化</span></span><br><span class="line">        <span class="comment">//简化形式</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;子线程3输出:&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程main输出:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="多线程的第三种创建方式"><a href="#多线程的第三种创建方式" class="headerlink" title="多线程的第三种创建方式"></a>多线程的第三种创建方式</h3><p>利用Callable接口、FutureTask类来实现。</p><p>① 创建任务对象</p><ul><li>定义一个类实现Callable接口，重写call方法，封装要做的事情，和要返回的数据。</li><li>把Callable类型的对象封装成FutureTask（线程任务对象）。</li></ul><p>② 把线程任务对象交给Thread对象。</p><p>③ 调用Thread对象的start方法启动线程。</p><p>④ 线程执行完毕后，通过FutureTask对象的get方法去获取线程任务执行的结果。</p><h4 id="Thread常见方法"><a href="#Thread常见方法" class="headerlink" title="Thread常见方法"></a>Thread常见方法</h4><p><img src="//imgs/JavaSE/image-20250420153610638.png" alt="image-20250420153610638"></p><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>让多个线程实现先后依次访问共享资源，这样可以解决安全问题</p><p>方法可以加锁来实现线程安全</p><h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4><p><img src="//imgs/JavaSE/image-20250420210025426.png" alt="image-20250420210025426"></p><p><img src="//imgs/JavaSE/image-20250420210008107.png" alt="image-20250420210008107"></p><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><p><img src="//imgs/JavaSE/image-20250420210303428.png" alt="image-20250420210303428">   </p><h4 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h4><p><img src="//imgs/JavaSE/image-20250420213121390.png" alt="image-20250420213121390"></p><h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><p>当多个线程共同操作共享的资源时，线程间通过某种方式互相告知自己的状态，以相互协调，避免无效的资源争夺。</p><p>线程通信的常见模型（生产者与消费者模型） </p><p>生产者负责生产数据</p><p>消费者负责消费生产者生产的数据。</p><p>生产者生产完数据应该等待自己，通知消费者消费；消费者消费完数据也应该等待自己，在通知生产者生产！</p><p><img src="//imgs/JavaSE/image-20250420232657927.png" alt="image-20250420232657927"></p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p><img src="//imgs/JavaSE/image-20250421215501978.png" alt="image-20250421215501978"></p><p><img src="//imgs/JavaSE/image-20250421214208681.png" alt="image-20250421214208681"></p><p><img src="//imgs/JavaSE/image-20250421220009584.png" alt="image-20250421220009584"></p><h4 id="Executors返回不同线程池对象"><a href="#Executors返回不同线程池对象" class="headerlink" title="Executors返回不同线程池对象"></a>Executors返回不同线程池对象</h4><p><img src="//imgs/JavaSE/image-20250421231132049.png" alt="image-20250421231132049"></p><p>注意：大型并发系统环境中用Executors会出现系统风险，建议通过ThreadPoolExecutor的方式。</p><h3 id="重点掌握：并发、并行"><a href="#重点掌握：并发、并行" class="headerlink" title="重点掌握：并发、并行"></a>重点掌握：并发、并行</h3><p>进程：正在运行的程序(软件)就是一个独立的进程。、</p><p>线程属于进程，一个进程中可以同时运行很多个线程。</p><p><strong>进程中的多个线程其实是可以并发和并行执行的。</strong></p><p><strong>并发</strong></p><p><img src="//imgs/JavaSE/image-20250421232428955.png" alt="image-20250421232428955"></p><p><strong>并行</strong></p><p><img src="//imgs/JavaSE/image-20250421232645669.png" alt="image-20250421232645669"></p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>线程的生命周期</p><p>● 也就是线程从生到死的过程中，经历的各种状态及状态转换。<br>● 理解线程这些状态有利于提升并发编程的理解能力。</p><p>Java线程的状态<br>● Java总共定义了6种状态<br>● 6种状态都定义在Thread类的内部枚举类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">        NEW,</span><br><span class="line">        RUNNABLE,</span><br><span class="line">        BLOCKED,</span><br><span class="line">        WAITING,</span><br><span class="line">        TIMED_WAITING,</span><br><span class="line">        TERMINATED;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="//imgs/JavaSE/image-20250421233547447.png" alt="image-20250421233547447"></p><p><img src="//imgs/JavaSE/image-20250421233605294.png" alt="image-20250421233605294"></p><h1 id="通信架构"><a href="#通信架构" class="headerlink" title="通信架构"></a>通信架构</h1><h2 id="基本的通信架构"><a href="#基本的通信架构" class="headerlink" title="基本的通信架构"></a>基本的通信架构</h2><p><img src="//imgs/JavaSE/image-20250422232952143.png" alt="image-20250422232952143"></p><p><strong>重点是开发BS架构</strong></p><p><img src="//imgs/JavaSE/image-20250422233015111.png" alt="image-20250422233015111"></p><p>都要用到网络编程，开发程序，实现网络通信。</p><h3 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h3><h3 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a><strong>网络通信三要素</strong></h3><ol><li><strong>IP地址</strong><ul><li>设备的唯一网络标识。</li></ul></li><li><strong>端口号</strong><ul><li>应用程序的唯一标识。</li></ul></li><li><strong>通信协议</strong><ul><li>数据传输的规则标准。</li></ul></li></ol><p><strong>特点</strong>：三者共同确保数据准确送达目标应用。</p><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a><strong>IP地址</strong></h4><ol><li><strong>定义</strong><ul><li>互联网协议地址，用于唯一标识网络设备。</li></ul></li><li><strong>版本类型</strong><ul><li><strong>IPv4</strong>：32位（4字节），如 <code>192.168.1.66</code></li><li><strong>IPv6</strong>：128位（扩展地址空间）</li></ul></li><li><strong>表示方法</strong><ul><li>二进制（如 <code>11000000.10101000...</code>）</li><li>点分十进制（如 <code>192.168.1.66</code>）</li></ul></li></ol><p>**核心作用：确保数据精准路由到目标设备。</p><p><img src="//imgs/JavaSE/image-20250422235933039.png" alt="image-20250422235933039"></p><p>IP域名</p><p><img src="//imgs/JavaSE/image-20250423002117449.png" alt="image-20250423002117449"></p><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p><strong>1. 定义</strong></p><ul><li><strong>端口</strong>是用于标识设备上运行的应用程序的16位数字（范围：0~65535）。</li></ul><p><strong>2. 分类</strong></p><table><thead><tr><th align="left"><strong>类型</strong></th><th align="left"><strong>范围</strong></th><th align="left"><strong>用途</strong></th><th align="left"><strong>示例</strong></th></tr></thead><tbody><tr><td align="left"><strong>周知端口</strong></td><td align="left">0~1023</td><td align="left">预留给知名应用（系统&#x2F;常用服务）</td><td align="left">HTTP: 80，FTP: 21</td></tr><tr><td align="left"><strong>注册端口</strong></td><td align="left">1024~49151</td><td align="left">分配给用户或应用程序（需注册）</td><td align="left">开发常用（如：8080）</td></tr><tr><td align="left"><strong>动态端口</strong></td><td align="left">49152~65535</td><td align="left">临时分配给进程，动态使用</td><td align="left">临时通信（如P2P）</td></tr></tbody></table><p><strong>3. 注意事项</strong></p><ul><li><strong>开发建议</strong>：自定义程序应使用<strong>注册端口</strong>（如8888、7777）。</li><li><strong>冲突禁止</strong>：同一设备上<strong>不可重复使用同一端口</strong>（如两个程序同时用8888会报错）。</li></ul><h4 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h4><p><img src="//imgs/JavaSE/image-20250423121604696.png" alt="image-20250423121604696"></p><h5 id="UDP通信协议"><a href="#UDP通信协议" class="headerlink" title="UDP通信协议"></a>UDP通信协议</h5><p><img src="//imgs/JavaSE/image-20250423160157946.png" alt="image-20250423160157946"></p><p>一发一收，多发多收</p><p><img src="//imgs/JavaSE/image-20250423160630970.png" alt="image-20250423160630970"></p><h5 id="TCP通信协议（三次握手建立连接；四次挥手断开连接）"><a href="#TCP通信协议（三次握手建立连接；四次挥手断开连接）" class="headerlink" title="TCP通信协议（三次握手建立连接；四次挥手断开连接）"></a>TCP通信协议（三次握手建立连接；四次挥手断开连接）</h5><p><img src="//imgs/JavaSE/image-20250423160055009.png" alt="image-20250423160055009"></p><p><img src="//imgs/JavaSE/image-20250423160128557.png" alt="image-20250423160128557"></p><h6 id="客户端开发"><a href="#客户端开发" class="headerlink" title="客户端开发"></a>客户端开发</h6><p><img src="//imgs/JavaSE/image-20250423170207380.png" alt="image-20250423170207380"></p><h6 id="服务端开发"><a href="#服务端开发" class="headerlink" title="服务端开发"></a>服务端开发</h6><p><img src="//imgs/JavaSE/image-20250423172003325.png" alt="image-20250423172003325"></p><p>与多个客户端同时通信（运用线程）</p><p><img src="//imgs/JavaSE/image-20250423201653321.png" alt="image-20250423201653321"></p><p>实现群聊功能</p><p><img src="//imgs/JavaSE/image-20250423233853219.png" alt="image-20250423233853219"></p><h4 id="BS架构"><a href="#BS架构" class="headerlink" title="BS架构"></a>BS架构</h4><p><img src="//imgs/JavaSE/image-20250425121300042.png" alt="image-20250425121300042"></p><p>服务器必须给浏览器响应规定的协议–Http协议</p><p><img src="//imgs/JavaSE/image-20250425121607336.png" alt="image-20250425121607336"></p><p>线程池优化</p><p><img src="//imgs/JavaSE/image-20250425124910054.png" alt="image-20250425124910054"></p><h1 id="Java高级"><a href="#Java高级" class="headerlink" title="Java高级"></a>Java高级</h1><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>JUnit单元测试框架</p><ul><li>可以用来对方法进行测试，它是第三方公司开源出来的（很多开发工具已经集成了JUnit框架，比如IDEA）</li></ul><p>优点</p><ul><li>可以灵活的编写测试代码，可以针对某个方法执行测试，也支持一键完成对全部方法的自动化测试，且各自独立。</li><li>不需要程序员去分析测试的结果，会自动生成测试报告出来。</li></ul><p><strong>常用注解</strong></p><p><img src="//imgs/JavaSE/image-20250425155431133.png" alt="image-20250425155431133"></p><p><img src="//imgs/JavaSE/image-20250425160310704.png" alt="image-20250425160310704"></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射（Reflection）</p><ul><li>反射就是：加载类，并允许以编程的方式解剖类中的各种成分（成员变量、方法、构造器等）。</li></ul><p>反射学什么？</p><p>学习获取类的信息、操作它们</p><ol><li>反射第一步：加载类，获取类的字节码：Class对象</li><li>获取类的构造器：Constructor对象</li><li>获取类的成员变量：Field对象</li><li>获取类的成员方法：Method对象</li></ol><p><strong>类 成员变量 构造器  成员方法</strong></p><p><img src="//imgs/JavaSE/image-20250425160738086.png" alt="image-20250425160738086"></p><p><img src="//imgs/JavaSE/image-20250425163725630.png" alt="image-20250425163725630"></p><p><img src="//imgs/JavaSE/image-20250425171416631.png" alt="image-20250425171416631"></p><p><img src="//imgs/JavaSE/image-20250425173553623.png" alt="image-20250425173553623"></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解（Annotation）</p><ul><li>就是Java代码里的特殊标记，比如：@Override、@Test等，作用是：让其他程序根据注解信息来决定怎么执行该程序。</li><li>注意：注解可以用在类上、构造器上、方法上、成员变量上、参数上、等位置处。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==test1()==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==test2()==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==test3()==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="//imgs/JavaSE/image-20250425230509635.png" alt="image-20250425230509635"></p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>指的是：修饰注解的注解。</p><p><strong>@Target</strong></p><p>作用：声明被修饰的注解只能在哪些位置使用</p><p>@Target(ElementType.TYPE)</p><ol><li>TYPE，类，接口</li><li>FIELD，成员变量</li><li>METHOD，成员方法</li><li>PARAMETER，方法参数</li><li>CONSTRUCTOR，构造器</li><li>LOCAL_VARIABLE，局部变量</li></ol><p><strong>@Retention</strong></p><p>作用：声明注解的保留周期。</p><p>@Retention(RetentionPolicy.RUNTIME)</p><ol><li>SOURCE<ul><li>只作用在源码阶段，字节码文件中不存在。</li></ul></li><li>CLASS（默认值）<ul><li>保留到字节码文件阶段，运行阶段不存在。</li></ul></li><li>RUNTIME（开发常用）<ul><li>一直保留到运行阶段。</li></ul></li></ol><p>什么是注解的解析？</p><ul><li>就是判断类上、方法上、成员变量上是否存在注解，并把注解里的内容给解析出来。</li></ul><p>如何解析注解？</p><ul><li>指导思想：要解析谁上面的注解，就应该先拿到谁。</li><li>比如要解析类上面的注解，则应该先获取该类的Class对象，再通过Class对象解析其上面的注解。</li><li>比如要解析成员方法上的注解，则应该获取到该成员方法的Method对象，再通过Method对象解析其上面的注解。</li><li>Class、Method、Field、Constructor、都实现了AnnotatedElement接口，它们都拥有解析注解的能力。</li></ul><table><thead><tr><th>AnnotatedElement接口提供了解析注解的方法</th><th>说明</th></tr></thead><tbody><tr><td>public Annotation[] getDeclaredAnnotations()</td><td>获取当前对象上面的注解。</td></tr><tr><td>public T getDeclaredAnnotation(Class<T> annotationClass)</td><td>获取指定的注解对象</td></tr><tr><td>public boolean isAnnotationPresent(Class<Annotation> annotationClass)</td><td>判断当前对象上是否存在某个注解</td></tr></tbody></table><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p><img src="//imgs/JavaSE/image-20250426164638629.png" alt="image-20250426164638629"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVASE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
